/*
              The default normalizer inserts an empty text node in this scenario, but it can be customised.
              So there is some risk here.
                         As long as the normalizer only inserts child nodes for this case it is safe to do in any order;
              by definition adding children to an empty node can't cause other paths to change.
            */

/*
         * ELEMENT NODE - Yield position(s) for voids, collect blockText for blocks
         */

/*
         * TEXT LEAF NODE - Iterate through text content, yielding
         * positions every `distance` offset according to `unit`.
         */

/*
        Fix dirty elements with no children.
        editor.normalizeNode() does fix this, but some normalization fixes also require it to work.
        Running an initial pass avoids the catch-22 race condition.
      */

/*
    Deep object equality is only necessary in one direction; in the reverse direction
    we are only looking for keys that are missing.
    As above, undefined keys are normalised to missing.
  */

/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */

/*
 * determines whether a string ends with the characters of a specified string
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 * @returns {boolean}
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

/* .array */

/* .channel */

/* .func */

/* .multicast */

/* .notUndef */

/* .pattern */

/* .string */

/* .stringableFunc */

/* .undef */

/* 0 */

/* 1 */

/* 10 */

/* 100 */

/* 101 */

/* 102 */

/* 103 */

/* 104 */

/* 105 */

/* 106 */

/* 107 */

/* 108 */

/* 109 */

/* 11 */

/* 110 */

/* 111 */

/* 112 */

/* 113 */

/* 114 */

/* 115 */

/* 116 */

/* 117 */

/* 118 */

/* 119 */

/* 12 */

/* 120 */

/* 121 */

/* 122 */

/* 123 */

/* 124 */

/* 125 */

/* 126 */

/* 127 */

/* 128 */

/* 129 */

/* 13 */

/* 130 */

/* 131 */

/* 132 */

/* 133 */

/* 134 */

/* 135 */

/* 136 */

/* 137 */

/* 138 */

/* 139 */

/* 14 */

/* 140 */

/* 141 */

/* 142 */

/* 143 */

/* 144 */

/* 145 */

/* 146 */

/* 147 */

/* 148 */

/* 149 */

/* 15 */

/* 150 */

/* 151 */

/* 152 */

/* 153 */

/* 154 */

/* 155 */

/* 156 */

/* 157 */

/* 158 */

/* 159 */

/* 16 */

/* 160 */

/* 161 */

/* 162 */

/* 163 */

/* 164 */

/* 165 */

/* 166 */

/* 167 */

/* 168 */

/* 169 */

/* 17 */

/* 170 */

/* 171 */

/* 172 */

/* 173 */

/* 174 */

/* 175 */

/* 176 */

/* 177 */

/* 178 */

/* 179 */

/* 18 */

/* 180 */

/* 181 */

/* 182 */

/* 183 */

/* 184 */

/* 185 */

/* 186 */

/* 187 */

/* 188 */

/* 189 */

/* 19 */

/* 190 */

/* 191 */

/* 192 */

/* 193 */

/* 194 */

/* 195 */

/* 196 */

/* 197 */

/* 198 */

/* 199 */

/* 2 */

/* 20 */

/* 200 */

/* 201 */

/* 202 */

/* 203 */

/* 204 */

/* 205 */

/* 206 */

/* 207 */

/* 208 */

/* 209 */

/* 21 */

/* 210 */

/* 211 */

/* 212 */

/* 213 */

/* 214 */

/* 215 */

/* 216 */

/* 217 */

/* 218 */

/* 219 */

/* 22 */

/* 220 */

/* 221 */

/* 222 */

/* 223 */

/* 224 */

/* 225 */

/* 226 */

/* 227 */

/* 228 */

/* 229 */

/* 23 */

/* 230 */

/* 231 */

/* 232 */

/* 233 */

/* 234 */

/* 235 */

/* 236 */

/* 237 */

/* 238 */

/* 239 */

/* 24 */

/* 240 */

/* 241 */

/* 242 */

/* 243 */

/* 244 */

/* 245 */

/* 246 */

/* 247 */

/* 248 */

/* 249 */

/* 25 */

/* 250 */

/* 251 */

/* 252 */

/* 253 */

/* 254 */

/* 255 */

/* 256 */

/* 257 */

/* 258 */

/* 259 */

/* 26 */

/* 260 */

/* 261 */

/* 262 */

/* 263 */

/* 264 */

/* 265 */

/* 266 */

/* 267 */

/* 268 */

/* 269 */

/* 27 */

/* 270 */

/* 271 */

/* 272 */

/* 273 */

/* 274 */

/* 275 */

/* 276 */

/* 277 */

/* 278 */

/* 279 */

/* 28 */

/* 280 */

/* 281 */

/* 282 */

/* 283 */

/* 284 */

/* 285 */

/* 286 */

/* 287 */

/* 288 */

/* 289 */

/* 29 */

/* 290 */

/* 291 */

/* 292 */

/* 293 */

/* 294 */

/* 295 */

/* 296 */

/* 297 */

/* 298 */

/* 299 */

/* 3 */

/* 30 */

/* 300 */

/* 301 */

/* 302 */

/* 303 */

/* 304 */

/* 305 */

/* 306 */

/* 307 */

/* 308 */

/* 309 */

/* 31 */

/* 310 */

/* 311 */

/* 312 */

/* 313 */

/* 314 */

/* 315 */

/* 316 */

/* 317 */

/* 318 */

/* 319 */

/* 32 */

/* 320 */

/* 321 */

/* 322 */

/* 323 */

/* 324 */

/* 325 */

/* 326 */

/* 327 */

/* 328 */

/* 329 */

/* 33 */

/* 330 */

/* 331 */

/* 332 */

/* 333 */

/* 334 */

/* 335 */

/* 336 */

/* 337 */

/* 338 */

/* 339 */

/* 34 */

/* 340 */

/* 341 */

/* 342 */

/* 343 */

/* 344 */

/* 345 */

/* 346 */

/* 347 */

/* 348 */

/* 349 */

/* 35 */

/* 350 */

/* 351 */

/* 352 */

/* 353 */

/* 354 */

/* 355 */

/* 356 */

/* 357 */

/* 358 */

/* 359 */

/* 36 */

/* 360 */

/* 361 */

/* 362 */

/* 363 */

/* 364 */

/* 365 */

/* 366 */

/* 367 */

/* 368 */

/* 369 */

/* 37 */

/* 370 */

/* 371 */

/* 372 */

/* 373 */

/* 374 */

/* 375 */

/* 376 */

/* 377 */

/* 378 */

/* 379 */

/* 38 */

/* 380 */

/* 381 */

/* 382 */

/* 383 */

/* 384 */

/* 385 */

/* 386 */

/* 387 */

/* 388 */

/* 389 */

/* 39 */

/* 390 */

/* 391 */

/* 392 */

/* 393 */

/* 394 */

/* 395 */

/* 396 */

/* 397 */

/* 398 */

/* 399 */

/* 4 */

/* 40 */

/* 400 */

/* 401 */

/* 402 */

/* 403 */

/* 404 */

/* 405 */

/* 406 */

/* 407 */

/* 408 */

/* 409 */

/* 41 */

/* 410 */

/* 411 */

/* 412 */

/* 413 */

/* 414 */

/* 415 */

/* 416 */

/* 417 */

/* 418 */

/* 419 */

/* 42 */

/* 420 */

/* 421 */

/* 422 */

/* 423 */

/* 424 */

/* 425 */

/* 426 */

/* 427 */

/* 428 */

/* 429 */

/* 43 */

/* 430 */

/* 431 */

/* 432 */

/* 433 */

/* 434 */

/* 435 */

/* 436 */

/* 437 */

/* 438 */

/* 439 */

/* 44 */

/* 440 */

/* 441 */

/* 442 */

/* 443 */

/* 444 */

/* 445 */

/* 446 */

/* 447 */

/* 448 */

/* 449 */

/* 45 */

/* 450 */

/* 451 */

/* 452 */

/* 453 */

/* 454 */

/* 455 */

/* 456 */

/* 457 */

/* 458 */

/* 459 */

/* 46 */

/* 460 */

/* 461 */

/* 462 */

/* 463 */

/* 464 */

/* 465 */

/* 466 */

/* 467 */

/* 468 */

/* 469 */

/* 47 */

/* 470 */

/* 471 */

/* 472 */

/* 473 */

/* 474 */

/* 475 */

/* 476 */

/* 477 */

/* 478 */

/* 479 */

/* 48 */

/* 480 */

/* 481 */

/* 482 */

/* 483 */

/* 484 */

/* 485 */

/* 486 */

/* 487 */

/* 488 */

/* 489 */

/* 49 */

/* 490 */

/* 491 */

/* 492 */

/* 493 */

/* 494 */

/* 495 */

/* 496 */

/* 497 */

/* 498 */

/* 499 */

/* 5 */

/* 50 */

/* 500 */

/* 501 */

/* 502 */

/* 503 */

/* 504 */

/* 505 */

/* 506 */

/* 507 */

/* 508 */

/* 509 */

/* 51 */

/* 510 */

/* 511 */

/* 512 */

/* 513 */

/* 514 */

/* 515 */

/* 516 */

/* 517 */

/* 518 */

/* 519 */

/* 52 */

/* 520 */

/* 521 */

/* 522 */

/* 523 */

/* 524 */

/* 525 */

/* 526 */

/* 527 */

/* 528 */

/* 529 */

/* 53 */

/* 530 */

/* 531 */

/* 532 */

/* 533 */

/* 534 */

/* 535 */

/* 536 */

/* 537 */

/* 538 */

/* 539 */

/* 54 */

/* 540 */

/* 541 */

/* 542 */

/* 543 */

/* 544 */

/* 545 */

/* 546 */

/* 547 */

/* 548 */

/* 549 */

/* 55 */

/* 550 */

/* 551 */

/* 552 */

/* 553 */

/* 554 */

/* 555 */

/* 556 */

/* 557 */

/* 558 */

/* 559 */

/* 56 */

/* 560 */

/* 561 */

/* 562 */

/* 563 */

/* 564 */

/* 565 */

/* 566 */

/* 567 */

/* 568 */

/* 569 */

/* 57 */

/* 570 */

/* 571 */

/* 572 */

/* 573 */

/* 574 */

/* 575 */

/* 576 */

/* 577 */

/* 578 */

/* 579 */

/* 58 */

/* 580 */

/* 581 */

/* 582 */

/* 583 */

/* 584 */

/* 585 */

/* 586 */

/* 587 */

/* 588 */

/* 589 */

/* 59 */

/* 590 */

/* 591 */

/* 592 */

/* 593 */

/* 594 */

/* 595 */

/* 596 */

/* 597 */

/* 598 */

/* 599 */

/* 6 */

/* 60 */

/* 600 */

/* 601 */

/* 602 */

/* 603 */

/* 604 */

/* 605 */

/* 606 */

/* 607 */

/* 608 */

/* 609 */

/* 61 */

/* 610 */

/* 611 */

/* 612 */

/* 613 */

/* 614 */

/* 615 */

/* 616 */

/* 617 */

/* 618 */

/* 619 */

/* 62 */

/* 620 */

/* 621 */

/* 622 */

/* 623 */

/* 624 */

/* 625 */

/* 626 */

/* 627 */

/* 628 */

/* 629 */

/* 63 */

/* 630 */

/* 631 */

/* 632 */

/* 633 */

/* 634 */

/* 635 */

/* 636 */

/* 637 */

/* 638 */

/* 639 */

/* 64 */

/* 640 */

/* 641 */

/* 642 */

/* 643 */

/* 644 */

/* 645 */

/* 646 */

/* 647 */

/* 648 */

/* 649 */

/* 65 */

/* 650 */

/* 651 */

/* 652 */

/* 653 */

/* 654 */

/* 655 */

/* 656 */

/* 657 */

/* 658 */

/* 659 */

/* 66 */

/* 660 */

/* 661 */

/* 662 */

/* 663 */

/* 664 */

/* 665 */

/* 666 */

/* 667 */

/* 668 */

/* 669 */

/* 67 */

/* 670 */

/* 671 */

/* 672 */

/* 673 */

/* 674 */

/* 675 */

/* 676 */

/* 677 */

/* 678 */

/* 679 */

/* 68 */

/* 680 */

/* 681 */

/* 682 */

/* 683 */

/* 684 */

/* 685 */

/* 686 */

/* 687 */

/* 688 */

/* 689 */

/* 69 */

/* 690 */

/* 691 */

/* 692 */

/* 693 */

/* 694 */

/* 695 */

/* 696 */

/* 697 */

/* 698 */

/* 699 */

/* 7 */

/* 70 */

/* 700 */

/* 701 */

/* 702 */

/* 703 */

/* 704 */

/* 705 */

/* 706 */

/* 707 */

/* 708 */

/* 709 */

/* 71 */

/* 710 */

/* 711 */

/* 712 */

/* 713 */

/* 714 */

/* 715 */

/* 716 */

/* 717 */

/* 718 */

/* 719 */

/* 72 */

/* 720 */

/* 721 */

/* 722 */

/* 723 */

/* 724 */

/* 725 */

/* 726 */

/* 727 */

/* 728 */

/* 729 */

/* 73 */

/* 730 */

/* 731 */

/* 732 */

/* 733 */

/* 734 */

/* 735 */

/* 736 */

/* 737 */

/* 738 */

/* 739 */

/* 74 */

/* 740 */

/* 741 */

/* 742 */

/* 743 */

/* 744 */

/* 745 */

/* 746 */

/* 747 */

/* 748 */

/* 749 */

/* 75 */

/* 750 */

/* 751 */

/* 752 */

/* 753 */

/* 754 */

/* 755 */

/* 756 */

/* 757 */

/* 758 */

/* 759 */

/* 76 */

/* 760 */

/* 761 */

/* 762 */

/* 763 */

/* 764 */

/* 765 */

/* 766 */

/* 767 */

/* 768 */

/* 769 */

/* 77 */

/* 770 */

/* 771 */

/* 772 */

/* 773 */

/* 774 */

/* 775 */

/* 776 */

/* 777 */

/* 778 */

/* 779 */

/* 78 */

/* 780 */

/* 781 */

/* 782 */

/* 783 */

/* 784 */

/* 785 */

/* 786 */

/* 787 */

/* 788 */

/* 789 */

/* 79 */

/* 790 */

/* 791 */

/* 792 */

/* 793 */

/* 794 */

/* 795 */

/* 796 */

/* 797 */

/* 798 */

/* 799 */

/* 8 */

/* 80 */

/* 800 */

/* 801 */

/* 802 */

/* 803 */

/* 804 */

/* 805 */

/* 806 */

/* 807 */

/* 808 */

/* 809 */

/* 81 */

/* 810 */

/* 811 */

/* 812 */

/* 813 */

/* 814 */

/* 815 */

/* 816 */

/* 817 */

/* 818 */

/* 819 */

/* 82 */

/* 820 */

/* 821 */

/* 822 */

/* 823 */

/* 824 */

/* 825 */

/* 826 */

/* 827 */

/* 828 */

/* 829 */

/* 83 */

/* 830 */

/* 831 */

/* 832 */

/* 833 */

/* 834 */

/* 835 */

/* 836 */

/* 837 */

/* 838 */

/* 839 */

/* 84 */

/* 840 */

/* 841 */

/* 842 */

/* 843 */

/* 844 */

/* 845 */

/* 846 */

/* 847 */

/* 848 */

/* 849 */

/* 85 */

/* 850 */

/* 851 */

/* 852 */

/* 853 */

/* 854 */

/* 855 */

/* 86 */

/* 87 */

/* 88 */

/* 89 */

/* 9 */

/* 90 */

/* 91 */

/* 92 */

/* 93 */

/* 94 */

/* 95 */

/* 96 */

/* 97 */

/* 98 */

/* 99 */

/* <------------------------------------ **** DEPENDENCE IMPORT END **** ------------------------------------ */

/* <------------------------------------ **** DEPENDENCE IMPORT START **** ------------------------------------ */

/* <------------------------------------ **** FUNCTION COMPONENT END **** ------------------------------------ */

/* <------------------------------------ **** FUNCTION COMPONENT START **** ------------------------------------ */

/* <------------------------------------ **** FUNCTION END **** ------------------------------------ */

/* <------------------------------------ **** FUNCTION START **** ------------------------------------ */

/* <------------------------------------ **** HOOKS END **** ------------------------------------ */

/* <------------------------------------ **** HOOKS START **** ------------------------------------ */

/* <------------------------------------ **** INIT END **** ------------------------------------ */

/* <------------------------------------ **** INIT START **** ------------------------------------ */

/* <------------------------------------ **** INTERFACE END **** ------------------------------------ */

/* <------------------------------------ **** INTERFACE START **** ------------------------------------ */

/* <------------------------------------ **** PARAMETER END **** ------------------------------------ */

/* <------------------------------------ **** PARAMETER START **** ------------------------------------ */

/* <------------------------------------ **** STATE END **** ------------------------------------ */

/* <------------------------------------ **** STATE START **** ------------------------------------ */

/* <------------------------------------ **** STATES END **** ------------------------------------ */

/* Editable */

/* Slate */

/* ["default"] */

/* array */

/* binding */

/* createRoot */

/* default */

/* default.addResourceBundle */

/* default.getResource */

/* default.language */

/* default.t */

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable no-empty */

/* eslint-disable no-fallthrough */

/* eslint-enable no-console */

/* eslint-enable no-empty */

/* func */

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

/* harmony default export */

/* harmony export */

/* harmony import */

/* import() */

/* isRoot */

/* iterator */

/* notUndef */

/* promise */

/* reexport */

/* reexport safe */

/* string */

/* stringableFunc */

/* symbol */

/* undef */

/* unused harmony exports c, w, x */

/* useFocused */

/* useSelected */

/* useSlateSelector */

/* useSlateStatic */

/* useTranslation */

/* withHistory */

/* withReact */

/*!
 * @kurkle/color v0.2.1
 * https://github.com/kurkle/color#readme
 * (c) 2022 Jukka Kurkela
 * Released under the MIT License
 */

/*!
 * Chart.js v3.8.2
 * https://www.chartjs.org
 * (c) 2022 Chart.js Contributors
 * Released under the MIT License
 */

/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

/*#__PURE__*/

/**
           * code maybe has The following results：
           *   cn:hk , cn:mo
           * Filter strings retain only countries
           */

/**
           * 列 的class
           */

/**
           * 列 的style
           */

/**
           * 如果有自定义的展示状态
           * 则取消内部的交互
           */

/**
           * 获取完成
           */

/**
          Cancels the current effect; this will propagate the cancellation down to any called tasks
        **/

/**
          If this Generator has a `return` method then invokes it
          This will jump to the finally block
        **/

/**
          This Generator has ended, terminate the main task and notify the fork queue
        **/

/**
          getting TASK_CANCEL automatically cancels the main task
          We can get this value here
           - By cancelling the parent task manually
          - By joining a Cancelled task
        **/

/**
         * 为什么要加1比较
         *   因为 这个
         */

/**
         * 开始获取
         */

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
       * 回归不可见状态
       */

/**
       * 开始为获取宽高 添加它应有的属性
       */

/**
       * 每个 header列的class
       */

/**
       * 每个 header列的style
       */

/**
       * 这里记录了状态
       */

/**
      each effect runner must attach its own logic of cancellation to the provided callback
      it allows this generator to propagate cancellation downward.
       ATTENTION! effect runners must setup the cancel logic by setting cb.cancel = [cancelMethod]
      And the setup must occur before calling the callback
       This is a sort of inversion of control: called async functions are responsible
      of completing the flow by calling the provided continuation; while caller functions
      are responsible for aborting the current flow by calling the attached cancel function
       Library users can attach their own cancellation logic to promises by defining a
      promise[CANCEL] method in their returned promises
      ATTENTION! calling cancel must have no effect on an already completed or cancelled effect
    **/

/**
     * 1 => overflow
     * 0 => free
     */

/**
     * Add a new item to the queue and ensure the highest priority element
     * is at the front of the queue.
     */

/**
     * Algorithm notes:
     *
     * Each step `distance` is dynamic depending on the underlying text
     * and the `unit` specified.  Each step, e.g., a line or word, may
     * span multiple text nodes, so we iterate through the text both on
     * two levels in step-sync:
     *
     * `leafText` stores the text on a text leaf level, and is advanced
     * through using the counters `leafTextOffset` and `leafTextRemaining`.
     *
     * `blockText` stores the text on a block level, and is shortened
     * by `distance` every time it is advanced.
     *
     * We only maintain a window of one blockText and one leafText because
     * a block node always appears before all of its leaf nodes.
     */

/**
     * Checking copied fragment from application/x-slate-fragment or data-slate-fragment
     */

/**
     * Return the highest priority element in the queue.
     */

/**
     * 为了避免不必要的递归
     * 这里做了处理
     * 如果找到的element包含在els里面 就没必要在向上找了
     * 因为 本地el就是els里 一会这个 找的element也会被再找一遍 所以可以return出去
     */

/**
     * 如果有自定义的展示状态
     * 则取消内部的交互
     */

/**
     * 当可见时
     * 过渡结束时
     */

/**
     * 添加或删除className
     */

/**
     * 计算位置
     */

/**
     * 这里判断是否已经将lang文件添加进入了
     */

/**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */

/**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */

/**
    Tracks the current effect cancellation
    Each time the generator progresses. calling runEffect will set a new value
    on it. It allows propagating cancellation to child effects
  **/

/**
    attaches cancellation logic to this task's continuation
    this will permit cancellation to propagate down the call chain
  **/

/**
    cancellation of the main task. We'll simply resume the Generator with a TASK_CANCEL
  **/

/**
   *
   * @param e 当移动时
   * @returns
   */

/**
   *
   * handle the style and icon  for each type
   */

/**
   *
   */

/**
   *  percent value range should be 0-100
   */

/**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */

/**
   * A very naive priority queue implementation.
   */

/**
   * Add a custom property to the leaf text nodes in the current selection.
   *
   * If the selection is currently collapsed, the marks will be added to the
   * `editor.marks` property instead, and applied when text is inserted next.
   */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Apply a series of changes inside a synchronous `fn`, without merging any of
   * the new operations into previous save point in the history.
   */

/**
   * Apply a series of changes inside a synchronous `fn`, without saving any of
   * their operations into the history.
   */

/**
   * Blur the editor.
   */

/**
   * Call a function, deferring normalization until after it completes.
   */

/**
   * Check if a DOM node is within the editor.
   */

/**
   * Check if a descendant node exists at a specific path.
   */

/**
   * Check if a node has block children.
   */

/**
   * Check if a node has inline and text children.
   */

/**
   * Check if a node has text children.
   */

/**
   * Check if a node matches a set of props.
   */

/**
   * Check if a path ends after one of the indexes in another.
   */

/**
   * Check if a path ends at one of the indexes in another.
   */

/**
   * Check if a path ends before one of the indexes in another.
   */

/**
   * Check if a path is a child of another.
   */

/**
   * Check if a path is a descendant of another.
   */

/**
   * Check if a path is a sibling of another.
   */

/**
   * Check if a path is after another.
   */

/**
   * Check if a path is an ancestor of another.
   */

/**
   * Check if a path is before another.
   */

/**
   * Check if a path is equal to or an ancestor of another.
   */

/**
   * Check if a path is exactly equal to another.
   */

/**
   * Check if a path is the parent of another.
   */

/**
   * Check if a point is after another.
   */

/**
   * Check if a point is an edge of a location.
   */

/**
   * Check if a point is before another.
   */

/**
   * Check if a point is exactly equal to another.
   */

/**
   * Check if a point is the end point of a location.
   */

/**
   * Check if a point is the start point of a location.
   */

/**
   * Check if a range includes a path, a point or part of another range.
   */

/**
   * Check if a range is backward, meaning that its anchor point appears in the
   * document _after_ its focus point.
   */

/**
   * Check if a range is collapsed, meaning that both its anchor and focus
   * points refer to the exact same position in the document.
   */

/**
   * Check if a range is exactly equal to another.
   */

/**
   * Check if a range is expanded.
   *
   * This is the opposite of [[Range.isCollapsed]] and is provided for legibility.
   */

/**
   * Check if a range is forward.
   *
   * This is the opposite of [[Range.isBackward]] and is provided for legibility.
   */

/**
   * Check if a set of props is a partial of Element.
   */

/**
   * Check if a value implements the 'Ancestor' interface.
   */

/**
   * Check if a value implements the [[Range]] interface.
   */

/**
   * Check if a value implements the `Element` interface and has elementKey with selected value.
   * Default it check to `type` key value
   */

/**
   * Check if a value implements the `Element` interface.
   */

/**
   * Check if a value implements the `Location` interface.
   */

/**
   * Check if a value implements the `Node` interface.
   */

/**
   * Check if a value implements the `Point` interface.
   */

/**
   * Check if a value implements the `Span` interface.
   */

/**
   * Check if a value implements the `Text` interface.
   */

/**
   * Check if a value is a `HistoryEditor` object.
   */

/**
   * Check if a value is a `History` object.
   */

/**
   * Check if a value is a block `Element` object.
   */

/**
   * Check if a value is a list of `Node` objects.
   */

/**
   * Check if a value is a list of `Operation` objects.
   */

/**
   * Check if a value is a list of `Text` objects.
   */

/**
   * Check if a value is a void `Element` object.
   */

/**
   * Check if a value is an `Editor` object.
   */

/**
   * Check if a value is an array of `Element` objects.
   */

/**
   * Check if a value is an inline `Element` object.
   */

/**
   * Check if an element is empty, accounting for void nodes.
   */

/**
   * Check if an element matches set of properties.
   *
   * Note: this checks custom properties, and it does not ensure that any
   * children are equivalent.
   */

/**
   * Check if an text matches set of properties.
   *
   * Note: this is for matching custom properties, and it does not ensure that
   * the `text` property are two nodes equal.
   */

/**
   * Check if some props are a partial of Text.
   */

/**
   * Check if the editor is currently normalizing after each operation.
   */

/**
   * Check if the editor is focused.
   */

/**
   * Check if the editor is in read-only mode.
   */

/**
   * Check if the path of previous sibling node exists
   */

/**
   * Check if the user is currently composing inside the editor.
   */

/**
   * Check if two text nodes are equal.
   *
   * When loose is set, the text is not compared. This is
   * used to check whether sibling text nodes can be merged.
   */

/**
   * Check is a value implements the `Path` interface.
   */

/**
   * Check of a value is a `NodeOperation` object.
   */

/**
   * Check of a value is a `SelectionOperation` object.
   */

/**
   * Check of a value is a `TextOperation` object.
   */

/**
   * Check of a value is an `Operation` object.
   */

/**
   * Collapse the selection.
   */

/**
   * Compare a path to another, returning an integer indicating whether the path
   * was before, at, or after the other.
   *
   * Note: Two paths of unequal length can still receive a `0` result if one is
   * directly above or below the other. If you want exact matching, use
   * [[Path.equals]] instead.
   */

/**
   * Compare a point to another, returning an integer indicating whether the
   * point was before, at, or after the other.
   */

/**
   * Convert a range into a non-hanging one.
   */

/**
   * Create a mutable ref for a `Path` object, which will stay in sync as new
   * operations are applied to the editor.
   */

/**
   * Create a mutable ref for a `Point` object, which will stay in sync as new
   * operations are applied to the editor.
   */

/**
   * Create a mutable ref for a `Range` object, which will stay in sync as new
   * operations are applied to the editor.
   */

/**
   * Delete content in the editor backward from the current selection.
   */

/**
   * Delete content in the editor forward from the current selection.
   */

/**
   * Delete content in the editor.
   */

/**
   * Delete the content in the current selection.
   */

/**
   * Deselect the editor.
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Experimental and android specific: Flush all pending diffs and cancel composition at the next possible time.
   */

/**
   * Experimental and android specific: Get pending diffs
   */

/**
   * Extract props from a Node.
   */

/**
   * Find a Slate node from a native DOM `element`.
   */

/**
   * Find a Slate point from a DOM selection's `domNode` and `domOffset`.
   */

/**
   * Find a Slate range from a DOM range or selection.
   */

/**
   * Find a key for a Slate node.
   */

/**
   * Find a native DOM range from a Slate `range`.
   *
   * Notice: the returned range will always be ordinal regardless of the direction of Slate `range` due to DOM API limit.
   *
   * there is no way to create a reverse DOM Range using Range.setStart/setEnd
   * according to https://dom.spec.whatwg.org/#concept-range-bp-set.
   */

/**
   * Find a native DOM selection point from a Slate point.
   */

/**
   * Find the DOM node that implements DocumentOrShadowRoot for the editor.
   */

/**
   * Find the native DOM element from a Slate node.
   */

/**
   * Find the path of Slate node.
   */

/**
   * Focus the editor.
   */

/**
   * Get a list of ancestor paths for a given path.
   *
   * The paths are sorted from shallowest to deepest ancestor. However, if the
   * `reverse: true` option is passed, they are reversed.
   */

/**
   * Get a list of paths at every level down to a path. Note: this is the same
   * as `Path.ancestors`, but including the path itself.
   *
   * The paths are sorted from shallowest to deepest. However, if the `reverse:
   * true` option is passed, they are reversed.
   */

/**
   * Get a path relative to an ancestor.
   */

/**
   * Get a range of a location.
   */

/**
   * Get an entry for the common ancesetor node of two paths.
   */

/**
   * Get the ancestor above a location in the document.
   */

/**
   * Get the child of a node at a specific index.
   */

/**
   * Get the common ancestor path of two paths.
   */

/**
   * Get the concatenated text string of a node's content.
   *
   * Note that this will not include spaces or line breaks between block nodes.
   * It is not a user-facing string, but a string for performing offset-related
   * computations for a node.
   */

/**
   * Get the descendant node referred to by a specific path. If the path is an
   * empty array, it refers to the root node itself.
   */

/**
   * Get the end point of a location.
   */

/**
   * Get the end point of a range.
   */

/**
   * Get the first node at a location.
   */

/**
   * Get the first node entry in a root node from a path.
   */

/**
   * Get the fragment at a location.
   */

/**
   * Get the intersection of a range with another.
   */

/**
   * Get the last node at a location.
   */

/**
   * Get the last node entry in a root node from a path.
   */

/**
   * Get the leaf text node at a location.
   */

/**
   * Get the leaves for a text node given decorations.
   */

/**
   * Get the marks that would be added to text at the current selection.
   */

/**
   * Get the matching node in the branch of the document after a location.
   */

/**
   * Get the matching node in the branch of the document before a location.
   */

/**
   * Get the merge flag's current value.
   */

/**
   * Get the node at a location.
   */

/**
   * Get the node at a specific path, asserting that it's a descendant node.
   */

/**
   * Get the node at a specific path, asserting that it's an ancestor node.
   */

/**
   * Get the node at a specific path, ensuring it's a leaf text node.
   */

/**
   * Get the parent node of a location.
   */

/**
   * Get the parent of a node at a specific path.
   */

/**
   * Get the path of a location.
   */

/**
   * Get the point after a location.
   */

/**
   * Get the point before a location.
   */

/**
   * Get the saving flag's current value.
   */

/**
   * Get the set of currently tracked path refs of the editor.
   */

/**
   * Get the set of currently tracked point refs of the editor.
   */

/**
   * Get the set of currently tracked range refs of the editor.
   */

/**
   * Get the sliced fragment represented by a range inside a root node.
   */

/**
   * Get the start and end points of a location.
   */

/**
   * Get the start and end points of a range, in the order in which they appear
   * in the document.
   */

/**
   * Get the start or end point of a location.
   */

/**
   * Get the start point of a location.
   */

/**
   * Get the start point of a range.
   */

/**
   * Get the target range from a DOM `event`.
   */

/**
   * Get the text string content of a location.
   *
   * Note: by default the text of void nodes is considered to be an empty
   * string, regardless of content, unless you pass in true for the voids option
   */

/**
   * Given a path, get the path to the next sibling node.
   */

/**
   * Given a path, get the path to the previous sibling node.
   */

/**
   * Given a path, return a new path referring to the parent node above it.
   */

/**
   * Insert a block break at the current selection.
   *
   * If the selection is currently expanded, it will be deleted first.
   */

/**
   * Insert a fragment at a specific location in the editor.
   */

/**
   * Insert a fragment at the current selection.
   *
   * If the selection is currently expanded, it will be deleted first.
   */

/**
   * Insert a node at the current selection.
   *
   * If the selection is currently expanded, it will be deleted first.
   */

/**
   * Insert a soft break at the current selection.
   *
   * If the selection is currently expanded, it will be deleted first.
   */

/**
   * Insert a string of text in the Editor.
   */

/**
   * Insert data from a `DataTransfer` into the editor.
   */

/**
   * Insert fragment data from a `DataTransfer` into the editor.
   */

/**
   * Insert nodes at a specific location in the Editor.
   */

/**
   * Insert text at the current selection.
   *
   * If the selection is currently expanded, it will be deleted first.
   */

/**
   * Insert text data from a `DataTransfer` into the editor.
   */

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
   * Invert an operation, returning a new operation that will exactly undo the
   * original when applied.
   */

/**
   * Iterate over the children of a node at a specific path.
   */

/**
   * Iterate through all of the levels at a location.
   */

/**
   * Iterate through all of the nodes in the Editor.
   */

/**
   * Iterate through all of the point entries in a range.
   */

/**
   * Lift nodes at a specific location upwards in the document tree, splitting
   * their parent in two if necessary.
   */

/**
   * Manually set if the editor should currently be normalizing.
   *
   * Note: Using this incorrectly can leave the editor in an invalid state.
   *
   */

/**
   * Match a void node in the current branch of the editor.
   */

/**
   * Merge a node at a location with the previous node of the same depth,
   * removing any empty containing nodes after the merge if necessary.
   */

/**
   * Move the nodes at a location to a new location.
   */

/**
   * Move the selection's point forward or backward.
   */

/**
   * Normalize any dirty objects in the editor.
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Redo to the previous saved state.
   */

/**
   * Remove a custom property from all of the leaf text nodes in the current
   * selection.
   *
   * If the selection is currently collapsed, the removal will be stored on
   * `editor.marks` and applied to the text inserted next.
   */

/**
   * Remove the nodes at a specific location in the document.
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

/**
   * Return a generator of all leaf text nodes in a root node.
   */

/**
   * Return a generator of all the ancestor nodes above a specific path.
   *
   * By default the order is top-down, from highest to lowest ancestor in
   * the tree, but you can pass the `reverse: true` option to go bottom-up.
   */

/**
   * Return a generator of all the descendant node entries inside a root node.
   */

/**
   * Return a generator of all the element nodes inside a root node. Each iteration
   * will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the
   * root node is an element it will be included in the iteration as well.
   */

/**
   * Return a generator of all the node entries of a root node. Each entry is
   * returned as a `[Node, Path]` tuple, with the path referring to the node's
   * position inside the root node.
   */

/**
   * Return a generator of the in a branch of the tree, from a specific path.
   *
   * By default the order is top-down, from highest to lowest node in the tree,
   * but you can pass the `reverse: true` option to go bottom-up.
   */

/**
   * Return all the positions in `at` range where a `Point` can be placed.
   *
   * By default, moves forward by individual offsets at a time, but
   * the `unit` option can be used to to move by character, word, line, or block.
   *
   * The `reverse` option can be used to change iteration direction.
   *
   * Note: By default void nodes are treated as a single point and iteration
   * will not happen inside their content unless you pass in true for the
   * `voids` option, then iteration will occur.
   */

/**
   * Return the host window of the current editor.
   */

/**
   * Returns whether this operation can affect paths or not. Used as an
   * optimization when updating dirty paths during normalization
   *
   * NOTE: This *must* be kept in sync with the implementation of 'transform'
   * below
   */

/**
   * Set new properties on one of the selection's points.
   */

/**
   * Set new properties on the nodes at a location.
   */

/**
   * Set new properties on the selection.
   */

/**
   * Set the selection to a new value.
   */

/**
   * Sets data from the currently selected fragment on a `DataTransfer`.
   */

/**
   * Split the nodes at a specific location.
   */

/**
   * The system is divided into two categories
   * 1. Management (mainly interactive)
   * 2. Product introduction (mainly display)
   */

/**
   * This is the generator driver
   * It's a recursive async/continuation function which calls itself
   * until the generator terminates or throws
   * @param {internal commands(TASK_CANCEL | TERMINATE) | any} arg - value, generator will be resumed with.
   * @param {boolean} isErr - the flag shows if effect finished with an error
   *
   * receives either (command | effect result, false) or (any thrown thing, true)
   */

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
   * Transform a path by an operation.
   */

/**
   * Transform a point by an operation.
   */

/**
   * Transform a range by an operation.
   */

/**
   * Transform the editor by an operation.
   */

/**
   * Transform the path ref's current value by an operation.
   */

/**
   * Transform the point ref's current value by an operation.
   */

/**
   * Transform the range ref's current value by an operation.
   */

/**
   * Undo to the previous saved state.
   */

/**
   * Unset properties on the nodes at a location.
   */

/**
   * Unset the selection.
   */

/**
   * Unwrap the nodes at a location from a parent node, splitting the parent if
   * necessary to ensure that only the content in the range is unwrapped.
   */

/**
   * Wrap the nodes at a location in a new container node, splitting the edges
   * of the range first to ensure that only the content in the range is wrapped.
   */

/**
   * animation start position
   */

/**
   * btn的状态
   * 是否被hover、focus
   */

/**
   * context
   */

/**
   * dropdown的参数
   */

/**
   * end
   * 将监听的数据转化为静态变量
   */

/**
   * handle Over
   */

/**
   * line element
   */

/**
   * title icon type
   */

/**
   * 下拉内容的状态
   * 是否被hover、focus
   */

/**
   * 下拉框的起点
   * @param {boolean} reverse 是否反转
   * @returns {[number,number]} [x,y]
   */

/**
   * 定位位置的入口
   */

/**
   * 将修改visible的方法暴露出去
   * 这样不仅可以做组件内的交互
   * 也可以让使用者自己做交互
   * 让两个交互合并起来都可以执行
   */

/**
   * 将动态监听的数据
   * 转化为静态的
   * end
   */

/**
   * 将动态监听的数据
   * 转化为静态的
   * start
   */

/**
   * 将监听的数据转化为静态变量
   * start
   */

/**
   * 当show切换时触发的
   */

/**
   * 当visible变化时
   */

/**
   * 当鼠标在滚动容器上时
   * 1. 重新计算滚动条尺寸
   */

/**
   * 根据type 来定义 它们自己的边界
   * @param type
   * @returns
   */

/**
   * 每当show改变时 要执行
   *  前提 先要获取到子节点的宽高
   */

/**
   * 比较children element的变化
   */

/**
   * 监听 kite的root element的变化
   * 如果 top、left、width、height和之前不同 就得重新计算位置
   */

/**
   * 监听 局部的show和全局的show
   */

/**
   * 监听滚动
   * @param {React.UIEvent<HTMLDivElement>} e event
   */

/**
   * 计数器
   * show 用来 判断是否有过渡效果
   * removeOnHidden 用来判断 时候可以cache
   */

/**
   * 过渡状态
   *
   * 0 => 还未开始
   * 1 => 开始
   * 2 => 结束
   * 3 => 取消
   */

/**
   * 过滤出所有为Right的 li的属性
   * 倒叙
   */

/**
   * 这里做次数判断
   */

/**
   * 这里加入翻译文件
   */

/**
   * 遍历行
   */

/**
   Creates a new task descriptor for this generator.
   A task is the aggregation of it's mainTask and all it's forked tasks.
   **/

/**
   Schedule the put in case another saga is holding a lock.
   The put will be executed atomically. ie nested puts will execute after
   this put has terminated.
   **/

/**
   This may be called by a parent generator to trigger/propagate cancellation
   cancel all pending tasks (including the main task), then end the current task.
    Cancellation propagates down to the whole execution tree held by this Parent task
   It's also propagated to all joiners of this task and their execution tree/joiners
    Cancellation is noop for terminated/Cancelled tasks tasks
   **/

/**
  Executes a task 'atomically'. Tasks scheduled during this execution will be queued
  and flushed after this task has finished (assuming the scheduler endup in a released
  state).
**/

/**
  Executes or queues a task depending on the state of the scheduler (`suspended` or `released`)
**/

/**
  Puts the scheduler in a `released` state.
**/

/**
  Puts the scheduler in a `suspended` state. Scheduled tasks will be queued until the
  scheduler is released.
**/

/**
  Releases the current lock. Executes all queued tasks if the scheduler is in the released state.
**/

/**
  channel(pattern, [buffer])    => creates a proxy channel for store actions
**/

/**
 *
 * @param children
 * @returns
 */

/**
 *
 * @param { HTMLElement | null} el
 * @returns {ScrollReturn}
 */

/**
 *
 * @param { string } id 唯一标志
 * @param { number } value scroll Value
 * @returns {void}
 */

/**
 *
 * @param {Date | number | string} time
 * @returns {Date | null}
 */

/**
 *
 * @param {HTMLElement} el
 * @param {string | string[]} classList
 * @returns {boolean}
 */

/**
 *
 * @param {HTMLElement} el
 * @param {string} cls
 * @param {string[]} container
 * @returns  {void}
 */

/**
 *
 * @param {HTMLElement} el
 * @returns {boolean}
 */

/**
 *
 * @param {number} start
 * @param {number} end
 * @returns {Label[]}
 */

/**
 *
 * @param {string } res
 * @returns {Date|null}
 */

/**
 *
 * @param {string} name
 * @returns {GetClassNameProps}
 */

/**
 *
 * @returns {Promise<number>}
 */

/**
 *
 */

/**
 * @deprecated
 *
 * **We recommend using the `configureStore` method
 * of the `@reduxjs/toolkit` package**, which replaces `createStore`.
 *
 * Redux Toolkit is our recommended approach for writing Redux logic today,
 * including store setup, reducers, data fetching, and more.
 *
 * **For more details, please read this Redux docs page:**
 * **https://redux.js.org/introduction/why-rtk-is-redux-today**
 *
 * `configureStore` from Redux Toolkit is an improved version of `createStore` that
 * simplifies setup and helps avoid common bugs.
 *
 * You should not be using the `redux` core package by itself today, except for learning purposes.
 * The `createStore` method from the core `redux` package will not be removed, but we encourage
 * all users to migrate to using Redux Toolkit for all Redux code.
 *
 * If you want to use `createStore` without this visual deprecation warning, use
 * the `legacy_createStore` import instead:
 *
 * `import { legacy_createStore as createStore} from 'redux'`
 *
 */

/**
 * @file
 * @date 2020-09-04
 * @author Mark
 * @lastModify Mark 2020-09-04
 */

/**
 * @file
 * @date 2021-11-11
 * @author xuejie.he
 * @lastModify xuejie.he 2021-11-11
 */

/**
 * @file
 * @date 2021-12-14
 * @author xuejie.he
 * @lastModify xuejie.he 2021-12-14
 */

/**
 * @file
 * @date 2021-12-21
 * @author xuejie.he
 * @lastModify xuejie.he 2021-12-21
 */

/**
 * @file
 * @date 2022-07-05
 * @author
 * @lastModify  2022-07-05
 */

/**
 * @file FontSizeList
 * @date 2022-03-08
 * @author xuejie.he
 * @lastModify xuejie.he 2022-03-08
 */

/**
 * @file Index file of GeneralInput component
 * @date 2020-09-04
 * @author Andy Jiang
 * @lastModify Andy Jiang 2020-09-04
 */

/**
 * @file Introduction
 * @date 2022-04-11
 * @author xuejie.he
 * @lastModify xuejie.he 2022-04-11
 */

/**
 * @file NavigationLink
 * @date 2022-04-11
 * @author xuejie.he
 * @lastModify xuejie.he 2022-04-11
 */

/**
 * @file Project
 * @date 2022-04-11
 * @author xuejie.he
 * @lastModify xuejie.he 2022-04-11
 */

/**
 * @file Project type context
 * @date 2022-09-27
 * @author Cunming Liu
 * @lastModify  2022-09-27
 */

/**
 * @file Temp
 * @date 2022-04-13
 * @author xuejie.he
 * @lastModify xuejie.he 2022-04-13
 */

/**
 * @file abc
 * @date 2021-12-10
 * @author xuejie.he
 * @lastModify xuejie.he 2021-12-10
 */

/**
 * @file abc
 * @date 2021-12-14
 * @author xuejie.he
 * @lastModify xuejie.he 2021-12-14
 */

/**
 * @file abc
 * @date 2021-12-15
 * @author xuejie.he
 * @lastModify xuejie.he 2021-12-15
 */

/**
 * @file abc
 * @date 2021-12-16
 * @author xuejie.he
 * @lastModify mingzhou.zhang 2022-4-25
 */

/**
 * @file abc
 * @date 2021-12-21
 * @author xuejie.he
 * @lastModify xuejie.he 2021-12-21
 */

/**
 * @file abc
 * @date 2022-03-08
 * @author xuejie.he
 * @lastModify xuejie.he 2022-03-08
 */

/**
 * @file add class
 * @date 2021-11-26
 * @author xuejie.he
 * @lastModify xuejie.he 2021-11-26
 */

/**
 * @file auto Position
 * @date 2022-01-14
 * @author xuejie.he
 * @lastModify xuejie.he 2022-01-14
 */

/**
 * @file check context
 * @date 2022-01-17
 * @author xuejie.he
 * @lastModify xuejie.he 2022-01-17
 */

/**
 * @file classnames file
 * @date 2022-06-09
 * @author mingzhou.zhang
 * @lastModify  2022-06-09
 */

/**
 * @file color conversion
 * @date 2021-08-12
 * @author xuejie.he
 * @lastModify xuejie.he 2021-08-12
 */

/**
 * @file content
 * @date 2022-03-25
 * @author xuejie.he
 * @lastModify xuejie.he 2022-03-25
 */

/**
 * @file defaultAttr
 * @date 2022-01-14
 * @author xuejie.he
 * @lastModify xuejie.he 2022-01-14
 */

/**
 * @file descendant 转化成Html
 * @date 2022-07-02
 * @author xuejie.he
 * @lastModify xuejie.he 2022-07-02
 */

/**
 * @file dropdown的 globalClick
 * @date 2022-10-20
 * @author xuejie.he
 * @lastModify xuejie.he 2022-10-20
 */

/**
 * @file get column props
 * @date 2022-03-23
 * @author xuejie.he
 * @lastModify xuejie.he 2022-03-23
 */

/**
 * @file getOverflowStatus
 * @date 2022-01-07
 * @author xuejie.he
 * @lastModify xuejie.he 2022-01-07
 */

/**
 * @file initClassName
 * @date 2021-12-08
 * @author xuejie.he
 * @lastModify xuejie.he 2021-12-08
 */

/**
 * @file is true
 * @date 2021-08-24
 * @author xuejie.he
 * @lastModify xuejie.he 2021-08-24
 */

/**
 * @file line progress
 * @date 2022-05-06
 * @author mingzhou.zhang
 * @lastModify  2022-05-06
 */

/**
 * @file mount
 * @date 2022-01-10
 * @author xuejie.he
 * @lastModify xuejie.he 2022-01-10
 */

/**
 * @file redirect Domain
 * @date 2022-08-10
 * @author Cunming Liu
 * @lastModify  2022-08-10
 */

/**
 * @file request
 * @date 2022-08-10
 * @author Cunming Liu
 * @lastModify  2022-08-10
 */

/**
 * @file setScrollBar style
 * @date 2021-12-15
 * @author xuejie.he
 * @lastModify xuejie.he 2021-12-15
 */

/**
 * @file steps component
 * @date 2020-10-20
 * @author Andy Jiang
 * @lastModify Andy Jiang 2020-10-20
 */

/**
 * @file tableContext
 * @date 2022-03-23
 * @author xuejie.he
 * @lastModify xuejie.he 2022-03-23
 */

/**
 * @file 找滚动容器
 * @date 2022-03-30
 * @author xuejie.he
 * @lastModify xuejie.he 2022-03-30
 */

/**
 * @file 获取element的key
 * @date 2022-03-24
 * @author xuejie.he
 * @lastModify xuejie.he 2022-03-24
 */

/**
 * @file 获取transform的每个值
 * @date 2022-05-27
 * @author xuejie.he
 * @lastModify xuejie.he 2022-05-27
 */

/**
 * @file 获取粘性定位的元素的位置
 * @date 2022-03-28
 * @author xuejie.he
 * @lastModify xuejie.he 2022-03-28
 */

/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * use-sync-external-store-shim.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * @param {window | Document | Element} el element
 * @param {EventParams[]} params eventParams
 */

/**
 * A React context for sharing the `readOnly` state of the editor.
 */

/**
 * A React context for sharing the editor selector context in a way to control rerenders
 */

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */

/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */

/**
 * A hook to access the redux `dispatch` function.
 *
 * @returns {any|function} redux store's `dispatch` function
 *
 * @example
 *
 * import React, { useCallback } from 'react'
 * import { useDispatch } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const dispatch = useDispatch()
 *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])
 *   return (
 *     <div>
 *       <span>{value}</span>
 *       <button onClick={increaseCounter}>Increase counter</button>
 *     </div>
 *   )
 * }
 */

/**
 * A hook to access the redux store's state. This hook takes a selector function
 * as an argument. The selector is called with the store state.
 *
 * This hook takes an optional equality comparison function as the second parameter
 * that allows you to customize the way the selected state is compared to determine
 * whether the component needs to be re-rendered.
 *
 * @param {Function} selector the selector function
 * @param {Function=} equalityFn the function that will be used to determine equality
 *
 * @returns {any} the selected state
 *
 * @example
 *
 * import React from 'react'
 * import { useSelector } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const counter = useSelector(state => state.counter)
 *   return <div>{counter}</div>
 * }
 */

/**
 * A hook to access the redux store.
 *
 * @returns {any} the redux store
 *
 * @example
 *
 * import React from 'react'
 * import { useStore } from 'react-redux'
 *
 * export const ExampleComponent = () => {
 *   const store = useStore()
 *   return <div>{store.getState()}</div>
 * }
 */

/**
 * A hook to access the value of the `ReactReduxContext`. This is a low-level
 * hook that you should usually not need to call directly.
 *
 * @returns {any} the value of the `ReactReduxContext`
 *
 * @example
 *
 * import React from 'react'
 * import { useReduxContext } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const { store } = useReduxContext()
 *   return <div>{store.getState()}</div>
 * }
 */

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */

/**
 * A wrapper around the provider to handle `onChange` events, because the editor
 * is a mutable singleton so it won't ever register as "changed" otherwise.
 */

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */

/**
 * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js
 *
 * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes
 * during build.
 * @param {number} code
 */

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */

/**
 * Add alignment patterns bits to matrix
 *
 * Note: this function must be called after {@link setupTimingPattern}
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */

/**
 * Add encoded data bits to matrix
 *
 * @param  {BitMatrix}  matrix Modules matrix
 * @param  {Uint8Array} data   Data codewords
 */

/**
 * Add finder patterns bits to matrix
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */

/**
 * Add format info bits to matrix
 *
 * @param  {BitMatrix} matrix               Modules matrix
 * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level
 * @param  {Number}    maskPattern          Mask pattern reference value
 */

/**
 * Add timing pattern bits to matrix
 *
 * Note: this function must be called before {@link setupAlignmentPattern}
 *
 * @param  {BitMatrix} matrix Modules matrix
 */

/**
 * Add version info bits to matrix
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */

/**
 * Alignment pattern are fixed reference pattern in defined positions
 * in a matrix symbology, which enables the decode software to re-synchronise
 * the coordinate mapping of the image modules in the event of moderate amounts
 * of distortion of the image.
 *
 * Alignment patterns are present only in QR Code symbols of version 2 or larger
 * and their number depends on the symbol version.
 */

/**
 * Alphanumeric mode encodes data from a set of 45 characters,
 * i.e. 10 numeric digits (0 - 9),
 *      26 alphabetic characters (A - Z),
 *   and 9 symbols (SP, $, %, *, +, -, ., /, :).
 * Normally, two input characters are represented by 11 bits.
 *
 * @type {Object}
 */

/**
 * Applies xor operator at specified location
 * (used during masking process)
 *
 * @param {Number}  row
 * @param {Number}  col
 * @param {Boolean} value
 */

/**
 * Apply a mask pattern to a BitMatrix
 *
 * @param  {Number}    pattern Pattern reference number
 * @param  {BitMatrix} data    BitMatrix data
 */

/**
 * Array of characters available in alphanumeric mode
 *
 * As per QR Code specification, to each character
 * is assigned a value from 0 to 44 which in this case coincides
 * with the array index
 *
 * @type {Array}
 */

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */

/**
 * Build QR Code symbol
 *
 * @param  {String} data                 Input string
 * @param  {Number} version              QR Code version
 * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level
 * @param  {MaskPattern} maskPattern     Mask pattern
 * @return {Object}                      Object containing symbol data
 */

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */

/**
 * Builds a graph from a list of nodes.
 * All segments in each node group will be connected with all the segments of
 * the next group and so on.
 *
 * At each connection will be assigned a weight depending on the
 * segment's byte length.
 *
 * @param  {Array} nodes    Array of object with segments data
 * @param  {Number} version QR Code version
 * @return {Object}         Graph of all possible segments
 */

/**
 * Builds a list of segments from an array.
 * Array can contain Strings or Objects with segment's info.
 *
 * For each item which is a string, will be generated a segment with the given
 * string and the more appropriate encoding mode.
 *
 * For each item which is an object, will be generated a segment with the given
 * data and mode.
 * Objects must contain at least the property "data".
 * If property "mode" is not present, the more suitable mode will be used.
 *
 * @param  {Array} array Array of objects with segments data
 * @return {Array}       Array of Segments
 */

/**
 * Builds a segment from a specified data and mode.
 * If a mode is not specified, the more suitable will be used.
 *
 * @param  {String} data             Input data
 * @param  {Mode | String} modesHint Data mode
 * @return {Segment}                 Segment
 */

/**
 * Builds an optimized sequence of segments from a string,
 * which will produce the shortest possible bitstream.
 *
 * @param  {String} data    Input string
 * @param  {Number} version QR Code version
 * @return {Array}          Array of segments
 */

/**
 * Calculate proportion of dark modules in entire symbol
 *
 * Points: N4 * k
 *
 * k is the rating of the deviation of the proportion of dark modules
 * in the symbol from 50% in steps of 5%
 */

/**
 * Calculate the remainder of polynomials division
 *
 * @param  {Uint8Array} divident Polynomial
 * @param  {Uint8Array} divisor  Polynomial
 * @return {Uint8Array}          Remainder
 */

/**
 * Calculate the row/column coordinates of the center module of each alignment pattern
 * for the specified QR Code version.
 *
 * The alignment patterns are positioned symmetrically on either side of the diagonal
 * running from the top left corner of the symbol to the bottom right corner.
 *
 * Since positions are simmetrical only half of the coordinates are returned.
 * Each item of the array will represent in turn the x and y coordinate.
 * @see {@link getPositions}
 *
 * @param  {Number} version QR Code version
 * @return {Array}          Array of coordinate
 */

/**
 * Check if QR Code version is valid
 *
 * @param  {Number}  version QR Code version
 * @return {Boolean}         true if valid version, false otherwise
 */

/**
 * Check if a DOM node is a comment node.
 */

/**
 * Check if bit at specified location is reserved
 *
 * @param {Number}   row
 * @param {Number}   col
 * @return {Boolean}
 */

/**
 * Check if input param is a valid mode object
 *
 * @param   {Mode}    mode Mode object
 * @returns {Boolean} True if valid mode, false otherwise
 */

/**
 * Check if mask pattern value is valid
 *
 * @param  {Number}  mask    Mask pattern
 * @return {Boolean}         true if valid, false otherwise
 */

/**
 * Check whether a text diff was applied in a way we can perform the pending action on /
 * recover the pending selection.
 */

/**
 * Check whether to merge an operation into the previous operation.
 */

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */

/**
 * Children.
 */

/**
 * Compare.
 */

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */

/**
 * Connects a React component to a Redux store.
 *
 * - Without arguments, just wraps the component, without changing the behavior / props
 *
 * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior
 * is to override ownProps (as stated in the docs), so what remains is everything that's
 * not a state or dispatch prop
 *
 * - When 3rd param is passed, we don't know if ownProps propagate and whether they
 * should be valid component props, because it depends on mergeProps implementation.
 * As such, it is the user's responsibility to extend ownProps interface from state or
 * dispatch props or both when applicable
 *
 * @param mapStateToProps A function that extracts values from state
 * @param mapDispatchToProps Setup for dispatching actions
 * @param mergeProps Optional callback to merge state and dispatch props together
 * @param options Options for configuring the connection
 *
 */

/**
 * Constants.
 */

/**
 * Convert a data object to FormData
 * @param {Object} obj
 * @param {?Object} [formData]
 * @returns {Object}
 **/

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

/**
 * Create a message that appears above the visible window
 * @param {TopMessageProps}
 * @returns void
 */

/**
 * Create a message that appears below the visible window
 * @param {BottomMessageProps}
 * @returns void
 */

/**
 * Create a new Slate `Editor` object.
 */

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */

/**
 * Create encoded codewords from data input
 *
 * @param  {Number}   version              QR Code version
 * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level
 * @param  {ByteData} data                 Data input
 * @return {Uint8Array}                    Buffer containing encoded codewords
 */

/**
 * Create selector context with editor updating on every editor change
 */

/**
 * Creates a Redux store that holds the state tree.
 *
 * **We recommend using `configureStore` from the
 * `@reduxjs/toolkit` package**, which replaces `createStore`:
 * **https://redux.js.org/introduction/why-rtk-is-redux-today**
 *
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */

/**
 * Data mask pattern reference
 * @type {Object}
 */

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */

/**
 * Determine if a value is a Date
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */

/**
 * Determine if a value is a File
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */

/**
 * Determine if a value is a FormData
 *
 * @param {Object} thing The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */

/**
 * Determine if a value is a URLSearchParams object
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */

/**
 * Determine if a value is an ArrayBuffer
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */

/**
 * Editable.
 */

/**
 * Encode data with Bose-Chaudhuri-Hocquenghem
 *
 * @param  {Number} data Value to encode
 * @return {Number}      Encoded value
 */

/**
 * Encode input data with Reed-Solomon and return codewords with
 * relative error correction bits
 *
 * @param  {BitBuffer} bitBuffer            Data to encode
 * @param  {Number}    version              QR Code version
 * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level
 * @return {Uint8Array}                     Buffer containing encoded codewords
 */

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * Encodes a chunk of data
 *
 * @param  {Uint8Array} data Buffer containing input data
 * @return {Uint8Array}      Buffer containing encoded data
 */

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */

/**
 * Export.
 */

/**
 * Expose `pathToRegexp`.
 */

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */

/**
 * Expose a method for transforming tokens into the path function.
 */

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */

/**
 * Extracts a series of segments with the appropriate
 * modes from a string
 *
 * @param  {String} dataStr Input string
 * @return {Array}          Array of object with segments data
 */

/**
 * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,
 * preceded or followed by light area 4 modules wide
 *
 * Points: N3 * number of pattern found
 */

/**
 * Find 2x2 blocks with the same color and assign a penalty value
 *
 * Points: N2 * (m - 1) * (n - 1)
 */

/**
 * Generate an irreducible generator polynomial of specified degree
 * (used by Reed-Solomon encoder)
 *
 * @param  {Number} degree Degree of the generator polynomial
 * @return {Uint8Array}    Buffer containing polynomial coefficients
 */

/**
 * Generates a list of all possible nodes combination which
 * will be used to build a segments graph.
 *
 * Nodes are divided by groups. Each group will contain a list of all the modes
 * in which is possible to encode the given text.
 *
 * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.
 * The group for '12345' will contain then 3 objects, one for each
 * possible encoding mode.
 *
 * Each node represents a possible segment.
 *
 * @param  {Array} segs Array of object with segments data
 * @return {Array}      Array of object with segments data
 */

/**
 * Get a list of segments of the specified mode
 * from a string
 *
 * @param  {Mode}   mode Segment mode
 * @param  {String} str  String to process
 * @return {Array}       Array of object with segments data
 */

/**
 * Get mode object from its name
 *
 * @param   {String} string Mode name
 * @returns {Mode}          Mode object
 */

/**
 * Get the "dirty" paths generated from an operation.
 */

/**
 * Get the distance to the end of the first character in a string of text.
 */

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */

/**
 * Get the slate range the text diff spans.
 */

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */

/**
 * Helper class to handle QR Code symbol modules
 *
 * @param {Number} size Symbol size
 */

/**
 * Hook factory, which creates a `useDispatch` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useDispatch` hook bound to the specified context.
 */

/**
 * Hook factory, which creates a `useSelector` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useSelector` hook bound to the specified context.
 */

/**
 * Hook factory, which creates a `useStore` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useStore` hook bound to the specified context.
 */

/**
 * In byte mode, data is encoded at 8 bits per character.
 *
 * @type {Object}
 */

/**
 * Infers the type of props that a connector will inject into a component.
 */

/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 */

/**
 * Initialize the encoder.
 * The input param should correspond to the number of error correction codewords.
 *
 * @param  {Number} degree
 */

/**
 * Is hotkey?
 */

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */

/**
 * Merges adjacent segments which have the same mode
 *
 * @param  {Array} segs Array of object with segments data
 * @return {Array}      Array of object with segments data
 */

/**
 * Mixed mode will contain a sequences of data in a combination of any of
 * the modes described above
 *
 * @type {Object}
 */

/**
 * Multiplies two number inside Galois Field
 *
 * @param  {Number} x
 * @param  {Number} y
 * @return {Number}
 */

/**
 * Multiplies two polynomials inside Galois Field
 *
 * @param  {Uint8Array} p1 Polynomial
 * @param  {Uint8Array} p2 Polynomial
 * @return {Uint8Array}    Product of p1 and p2
 */

/**
 * Normalize a 'pending point' a.k.a a point based on the dom state before applying
 * the pending diffs. Since the pending diffs might have been inserted with different
 * marks we have to 'walk' the offset from the starting position to ensure we still
 * have a valid point inside the document
 */

/**
 * Normalize a 'pending selection' to ensure it's valid in the current document state.
 */

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */

/**
 * Numeric mode encodes data from the decimal digit set (0 - 9)
 * (byte values 30HEX to 39HEX).
 * Normally, 3 data characters are represented by 10 bits.
 *
 * @type {Object}
 */

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */

/**
 * Parse.
 */

/**
 * Precompute the log and anti-log tables for faster computation later
 *
 * For each possible value in the galois field 2^8, we will pre-compute
 * the logarithm and anti-logarithm (exponential) of this value
 *
 * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}
 */

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */

/**
 * Puts the scheduler in a `suspended` state and executes a task immediately.
 */

/**
 * QR Code
 *
 * @param {String | Array} data                 Input data
 * @param {Object} options                      Optional configurations
 * @param {Number} options.version              QR Code version
 * @param {String} options.errorCorrectionLevel Error correction level
 * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis
 */

/**
 * QRCode for JavaScript
 *
 * modified by Ryan Day for nodejs support
 * Copyright (c) 2011 Ryan Day
 *
 * Licensed under the MIT license:
 *   http://www.opensource.org/licenses/mit-license.php
 *
//---------------------------------------------------------------------
// QRCode for JavaScript
//
// Copyright (c) 2009 Kazuhiko Arase
//
// URL: http://www.d-project.com/
//
// Licensed under the MIT license:
//   http://www.opensource.org/licenses/mit-license.php
//
// The word "QR Code" is registered trademark of
// DENSO WAVE INCORPORATED
//   http://www.denso-wave.com/qrcode/faqpatent-e.html
//
//---------------------------------------------------------------------
*/

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */

/**
 * Remove redundant changes from the diff so that it spans the minimal possible range
 */

/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function} [filter]
 * @returns {Object}
 */

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */

/**
 * Return a string diff that is equivalent to applying b after a spanning the range of
 * both changes
 */

/**
 * Return mask value at given position
 *
 * @param  {Number} maskPattern Pattern reference value
 * @param  {Number} i           Row
 * @param  {Number} j           Column
 * @return {Boolean}            Mask value
 */

/**
 * Return mode name as string
 *
 * @param {Mode} mode Mode object
 * @returns {String}  Mode name
 */

/**
 * Returns UTF8 byte length
 *
 * @param  {String} str Input string
 * @return {Number}     Number of byte
 */

/**
 * Returns an array containing the positions of each alignment pattern.
 * Each array's element represent the center point of the pattern as (x, y) coordinates
 *
 * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}
 * and filtering out the items that overlaps with finder pattern
 *
 * @example
 * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.
 * The alignment patterns, therefore, are to be centered on (row, column)
 * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).
 * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns
 * and are not therefore used for alignment patterns.
 *
 * let pos = getPositions(7)
 * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]
 *
 * @param  {Number} version QR Code version
 * @return {Array}          Array of coordinates
 */

/**
 * Returns an array containing the positions of each finder pattern.
 * Each array's element represent the top-left point of the pattern as (x, y) coordinates
 *
 * @param  {Number} version QR Code version
 * @return {Array}          Array of coordinates
 */

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */

/**
 * Returns anti-log value of n inside Galois Field
 *
 * @param  {Number} n
 * @return {Number}
 */

/**
 * Returns bit value at specified location
 *
 * @param  {Number}  row
 * @param  {Number}  col
 * @return {Boolean}
 */

/**
 * Returns format information with relative error correction bits
 *
 * The format information is a 15-bit sequence containing 5 data bits,
 * with 10 error correction bits calculated using the (15, 5) BCH code.
 *
 * @param  {Number} errorCorrectionLevel Error correction level
 * @param  {Number} mask                 Mask pattern
 * @return {Number}                      Encoded format information bits
 */

/**
 * Returns how many bits are needed to encode a string of
 * specified length with the specified mode
 *
 * @param  {Number} length String length
 * @param  {Mode} mode     Segment mode
 * @return {Number}        Bit length
 */

/**
 * Returns how much data can be stored with the specified QR code version
 * and error correction level
 *
 * @param  {Number} version              QR Code version (1-40)
 * @param  {Number} errorCorrectionLevel Error correction level
 * @param  {Mode}   mode                 Data mode
 * @return {Number}                      Quantity of storable data
 */

/**
 * Returns log value of n inside Galois Field
 *
 * @param  {Number} n
 * @return {Number}
 */

/**
 * Returns mask pattern from a value.
 * If value is not valid, returns undefined
 *
 * @param  {Number|String} value        Mask pattern value
 * @return {Number}                     Valid mask pattern or undefined
 */

/**
 * Returns mode from a value.
 * If value is not a valid mode, returns defaultValue
 *
 * @param  {Mode|String} value        Encoding mode
 * @param  {Mode}        defaultValue Fallback value
 * @return {Mode}                     Encoding mode
 */

/**
 * Returns new array from array like object
 * @param {*} [thing]
 * @returns {Array}
 */

/**
 * Returns the QR Code size for the specified version
 *
 * @param  {Number} version QR Code version
 * @return {Number}         size of QR code
 */

/**
 * Returns the best mask pattern for data
 *
 * @param  {BitMatrix} data
 * @return {Number} Mask pattern reference number
 */

/**
 * Returns the host window of a DOM node
 */

/**
 * Returns the minimum version needed to contain the amount of data
 *
 * @param  {Segment} data                    Segment of data
 * @param  {Number} [errorCorrectionLevel=H] Error correction level
 * @param  {Mode} mode                       Data mode
 * @return {Number}                          QR Code version
 */

/**
 * Returns the most efficient mode to store the specified data
 *
 * @param  {String} dataStr Input data string
 * @return {Mode}           Best mode
 */

/**
 * Returns the number of bits needed to store the data length
 * according to QR Code specifications.
 *
 * @param  {Mode}   mode    Data mode
 * @param  {Number} version QR Code version
 * @return {Number}         Number of bits
 */

/**
 * Returns the number of error correction block that the QR Code should contain
 * for the specified version and error correction level.
 *
 * @param  {Number} version              QR Code version
 * @param  {Number} errorCorrectionLevel Error correction level
 * @return {Number}                      Number of error correction blocks
 */

/**
 * Returns the number of error correction codewords to use for the specified
 * version and error correction level.
 *
 * @param  {Number} version              QR Code version
 * @param  {Number} errorCorrectionLevel Error correction level
 * @return {Number}                      Number of error correction codewords
 */

/**
 * Returns the total number of codewords used to store data and EC information.
 *
 * @param  {Number} version QR Code version
 * @return {Number}         Data length in bits
 */

/**
 * Returns version information with relative error correction bits
 *
 * The version information is included in QR Code symbols of version 7 or larger.
 * It consists of an 18-bit sequence containing 6 data bits,
 * with 12 error correction bits calculated using the (18, 6) Golay code.
 *
 * @param  {Number} version QR Code version
 * @return {Number}         Encoded version info bits
 */

/**
 * Returns version number from a value.
 * If value is not a valid version, returns defaultValue
 *
 * @param  {Number|String} value        QR Code version
 * @param  {Number}        defaultValue Fallback value
 * @return {Number}                     QR Code version number
 */

/**
 * Set bit value at specified location
 * If reserved flag is set, this bit will be ignored during masking process
 *
 * @param {Number}  row
 * @param {Number}  col
 * @param {Boolean} value
 * @param {Boolean} reserved
 */

/**
 * Splits a string in various segments with the modes which
 * best represent their content.
 * The produced segments are far from being optimized.
 * The output of this function is only used to estimate a QR Code version
 * which may contain the data.
 *
 * @param  {string} data Input string
 * @return {Array}       Array of segments
 */

/**
 * Subscribe to the cancel signal
 */

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

/**
 * The Kanji mode efficiently encodes Kanji characters in accordance with
 * the Shift JIS system based on JIS X 0208.
 * The Shift JIS values are shifted from the JIS X 0208 values.
 * JIS X 0208 gives details of the shift coded representation.
 * Each two-byte character value is compacted to a 13-bit binary codeword.
 *
 * @type {Object}
 */

/**
 * The `withHistory` plugin keeps track of the operation history of a Slate
 * editor as operations are applied to it, using undo and redo stacks.
 *
 * If you are using TypeScript, you must extend Slate's CustomTypes to use
 * this plugin.
 *
 * See https://docs.slatejs.org/concepts/11-typescript to learn how.
 */

/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

/**
 * This file automatically generated from `pre-publish.js`.
 * Do not manually edit.
 */

/**
 * Throws a `CanceledError` if cancellation has been requested.
 */

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */

/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */

/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */

/**
 * Unsubscribe from the cancel signal
 */

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

/**
 * Utils.
 */

/**
 * Weighted penalty scores for the undesirable features
 * @type {Object}
 */

/**
 * `withReact` adds React and DOM specific behaviors to the editor.
 *
 * If you are using TypeScript, you must extend Slate's CustomTypes to use
 * this plugin.
 *
 * See https://docs.slatejs.org/concepts/11-typescript to learn how.
 */

/**
 * not is null or not is undefined
 * @param {T} val
 * @returns {boolean}
 */

/**
 * transition-clock  用来获取过渡之前的数据
 * @param initStyle 初始的样式
 * @param extraStyle 通过计算 后 又想要加的额外样式
 * @param onTransitionStart 过渡开始
 * @param onTransitionEnd 过渡结束
 * @param onTransitionCancel 过渡取消
 * @param onTransitionCancel 过渡取消
 * @param root 要变化的节点
 * @returns
 */

/**
 * use redux style selectors to prevent rerendering on every keystroke.
 * Bear in mind rerendering can only prevented if the returned value is a value type or for reference types (e.g. objects and arrays) add a custom equality function.
 *
 * Example:
 * ```
 *  const isSelectionActive = useSlateSelector(editor => Boolean(editor.selection));
 * ```
 */

/**
 * 判断是否为null或undefined
 */

/**
 * 排除属性方法
 * @param obj 操作对象
 * @param fields 排除属性 数组
 * @returns 返回一个 已排除后 的对象
 */

/**
 * 自动定位位置
 */

/**
 * 获取粘性定位的 列表
 */

/**
 * 选择属性方法
 * @param obj 操作对象
 * @param fields 选择属性 数组
 * @returns 返回一个 只包含选择属性 的对象
 */

/**
 Used to track a parent task and its forks
 In the fork model, forked tasks are attached by default to their parent
 We model this using the concept of Parent task && main Task
 main task is the main flow of the current Generator, the parent tasks is the
 aggregation of the main tasks + all its forked tasks.
 Thus the whole model represents an execution tree with multiple branches (vs the
 linear execution tree in sequential (non parallel) programming)

 A parent tasks has the following semantics
 - It completes if all its forks either complete or all cancelled
 - If it's cancelled, all forks are cancelled as well
 - It aborts if any uncaught error bubbles up from forks
 - If it completes, the return value is the one returned by the main task
 **/

/**
* Find adjacent modules in row/column with the same color
* and assign a penalty value.
*
* Points: N1 + i
* i is the amount by which the number of adjacent modules of the same color exceeds 5
*/

/**
import { i18next } from 'i18next';
 * @file: data date
 * @date: 2021-05-21 10:32
 * @author: xuejie.he
 * @lastModify: xuejie.he 2021-05-21 10:32
 */

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @type {!Array} */

/** @type {!Object} */

/** @type {string} */

/** Built-in value references. */

/** Creates a main task to track the main flow */

/** Detect free variable `global` from Node.js. */

/** Detect free variable `self`. */

/** Error message constants. */

/** This section will include all the interface for this tsx file */

/** This section will include all the necessary dependence for this tsx file */

/** Used as references for various `Number` constants. */

/** Used for built-in method references. */

/** Used to match a single whitespace character. */

/** Used to match leading whitespace. */

/** `Object#toString` result references. */

/***
   * 记录上一次的show的状态
   */

/***** 这里做是否有过渡动画判断 *********/

/***** 这里做是否有过渡动画判断结束 *********/

/************* This section will include this component HOOK function *************/

/************* This section will include this component general function *************/

/************* This section will include this component parameter *************/

/******************************************************************************
 * Created 2008-08-19.
 *
 * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.
 *
 * Copyright (C) 2008
 *   Wyatt Baldwin <self@wyattbaldwin.com>
 *   All rights reserved
 *
 * Licensed under the MIT license.
 *
 *   http://www.opensource.org/licenses/mit-license.php
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *****************************************************************************/

/***/

/**Banishment start*/

/*break*/

/*eslint func-names:0*/

/*eslint no-param-reassign:0*/

/*eslint-disable no-console*/

/*return*/

/*yield*/

//

//                             break;

//                             code = "cn";

//                             code = "en";

//                         case "cn":

//                         case "hk":

//                         case "tw":

//                         default:

//                         iso_code: string;

//                         resolve(getLanguageByBrowser());

//                      * has any particular property, so we need to code defensively. */

//                     /* ISO country codes are in upper case. */

//                     /* There's no guarantee that a successful response object

//                     : data.btnRect.left + data.btnRect.width + data.scrollX;

//                     : data.btnRect.left + data.scrollX;

//                     : data.btnRect.top + data.btnRect.height + data.scrollY;

//                     : data.btnRect.top + data.scrollY;

//                     ? data.btnRect.left + data.btnRect.width + data.scrollX

//                     ? data.btnRect.left + data.scrollX

//                     ? data.btnRect.top + data.btnRect.height + data.scrollY

//                     ? data.btnRect.top + data.scrollY

//                     country: {

//                     if (!geoipResponse.country.iso_code) {

//                     let code = geoipResponse.country.iso_code.toLowerCase();

//                     resolve(code);

//                     resolve(getLanguageByBrowser());

//                     switch (code) {

//                     window.geoip2.country(onSuccess, onError);

//                     }

//                     };

//                 const onError = function () {

//                 const onSuccess = function (geoipResponse: {

//                 return function () {

//                 x = reverse

//                 y = reverse

//                 }) {

//                 };

//             break;

//             console.log(ip_addrs);

//             const addrs = ip_regex.exec(ice.candidate.candidate);

//             const ipPosition = (function () {

//             const ip_addrs = addrs && addrs[1];

//             const ip_regex = /([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/;

//             if (data.placement.endsWith("t")) {

//             if (data.placement.startsWith("l")) {

//             ipPosition();

//             pc.onicecandidate = noop;

//             resolve(getLanguageByBrowser());

//             x = data.btnRect.left + data.scrollX;

//             y = data.btnRect.top + data.scrollY;

//             {children}

//             }

//             } else {

//             })();

//         </a>

//         <a href={(element as unknown as Record<"url", string>).url} {...attributes}>

//         attributes: true,

//         case "horizontal":

//         case "vertical":

//         console.log(" ******************** ");

//         console.log("className", node.getAttribute("class"));

//         console.log("style", node.getAttribute("style"));

//         fill: color,

//         height: height,

//         iceServers: [],

//         if (ice.candidate) {

//         ob.disconnect();

//         return;

//         script.onerror = () => {

//         script.onload = () => {

//         width: width,

//         }

//         };

//     );

//     // eslint-disable-next-line @typescript-eslint/no-empty-function

//     `blockText='${blockText}' - `+

//     `leafTextRemaining=${leafTextRemaining} - `+

//     `not exhausted before new block node`, path)

//     `not exhausted before new leaf text node`, path)

//     child = <code>{child}</code>;

//     className={className ?? ""}

//     const data = staticData as StaticProps;

//     const fn = () => {

//     const node = root;

//     const noop = function () {};

//     const ob = new MutationObserver(fn);

//     const pc = new RTCPeerConnection({

//     const script = document.createElement("script");

//     document.head.appendChild(script);

//     if (!data) {

//     if (!node) {

//     let sendChannel = pc.createDataChannel("sendChannel");

//     let x = 0;

//     let y = 0;

//     ob.observe(node, {

//     pc.onicecandidate = function (ice) {

//     return (

//     return () => {

//     return <blockquote {...attributes}>{children}</blockquote>;

//     return <h1 {...attributes}>{children}</h1>;

//     return <h2 {...attributes}>{children}</h2>;

//     return <h3 {...attributes}>{children}</h3>;

//     return <h4 {...attributes}>{children}</h4>;

//     return <h5 {...attributes}>{children}</h5>;

//     return <h6 {...attributes}>{children}</h6>;

//     return <li {...attributes}>{children}</li>;

//     return <ol {...attributes}>{children}</ol>;

//     return <pre {...attributes}>{children}</pre>;

//     return <ul {...attributes}>{children}</ul>;

//     return [x, y];

//     return new Promise<string>((resolve) => {

//     script.src = "//geoip-js.com/js/apis/geoip2/v2.1/geoip2.js";

//     script.type = "text/javascript";

//     sendChannel.onopen =

//     style={{

//     switch (data.direction) {

//     }

//     });

//     };

//     }}

//    is used by selectorFactory to decide if it should reinvoke on props changes.

//    new function as the true mapToProps for subsequent calls.

//    the developer that their mapToProps function is not returning a valid result.

//   and causing memory leaks

//   blockRange = Editor.range(editor, ...Editor.edges(editor, path))

//   blockRange = Range.intersection(range, blockRange) // intersect

//   blockText = Editor.string(editor, blockRange, { voids })

//   console.assert(blockText === '',

//   console.assert(blockText === '', "blockText wasn't exhausted")

//   console.assert(leafTextRemaining <= 0,

//   console.assert(leafTextRemaining <= 0, "leafText wasn't exhausted")

//  * Detects whether the mapToProps function being called depends on props, which

//  * On first call, handles mapToProps if returns another function, and treats that

//  * On first call, verifies the first result is a plain object, in order to warn

//  * 测试逻辑

//  */

//  It seems that the dispatch argument

//  and a state object in some others (ex: whenMapStateToPropsIsMissing)

//  could be a dispatch function in some cases (ex: whenMapDispatchToPropsIsMissing)

//  isRemove = true;

// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]

// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]

// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]

// "break on all exceptions" in your console,

// (2017/10/17)

// (2020/08/08)

// (e.g. when clicking on contentEditable:false element)

// (meaning that the selection ends before the element)

// (no input) and doesn't perform any dom mutations. Without a flush timeout we would never flush

// * Note:

// - However, we may have gotten new wrapper props after that

// - This render may have been triggered by a Redux store update that produced new child props

// - we extract this to a separate function to avoid closing over values

// - we need to fall back to `useEffect` in SSR to avoid annoying warnings

// ----------------

// ...and explore the edges that connect u to those nodes, updating

// /**

// 2-byte UTF-8

// 3-byte UTF-8

// 4-byte UTF-8

// </div>

// <div

// >

// @see {@link Mode.getCharCountIndicator}.

// @see {@link initTables}

// @see {@link mul}

// @ts-expect-error an unorthodox delete D:

// @ts-ignore

// @ts-ignore 'AnyAction' is assignable to the constraint of type 'A', but 'A' could be instantiated with a different subtype

// @ts-ignore The `beforeinput` event isn't recognized.

// @ts-ignore The `getTargetRanges` property isn't recognized.

// A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).

// A length of one signals that mapToProps does not depend on props from the parent component.

// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and

// Actually run the selector with the most recent store state and wrapper props

// Actually subscribe to the nearest connected ancestor (or store)

// Add a hacky cast to get the right output type

// Add a terminator.

// Add data codewords

// Add default alpha value

// Add function modules

// Add headers to the request

// Add pad bytes if the string is still shorter than the total number of required bits.

// Add responseType to request if needed

// Add temporary dummy bits for format info just to set them as reserved.

// Add the content to a <div> so that we can get its inner HTML.

// Add withCredentials to request if needed

// Add xsrf header

// Advance `leafText` by the current `distance`.

// After adding the terminator, if the number of bits in the string is not a multiple of 8,

// Allocate matrix buffer

// Allow for axios('example/url'[, config]) a la fetch API

// Allow injecting another batching function later

// Allow positioning relative to the editable element.

// Allow use of default import syntax in TypeScript

// Allow words to break if they are too long.

// And in Firefox, the selection isn't properly collapsed.

// Any reducers that existed in both the new and old rootReducer

// Apped EC codewords

// Apply mask pattern

// At this time, the Slate document may be arbitrarily different,

// Attach a native DOM event handler for `beforeinput` events, because React's

// Attach a native DOM event handler for `selectionchange`, because React's

// Avoid failures from read-only properties

// Axios

// Based on the previous check, one of these must be true

// Because of that, the useSyncExternalStore compat shim is needed.

// Block element node - set `blockText` to its text content.

// Build optimized segments

// But, if we have new wrapper props, those might change the child props, so we have to recalculate things.

// By default, use the selection as the target location. But if there is

// By explicitly using `prop-types` you are opting into new production behavior.

// COMPAT: Android IMEs might remove the zero width space while composing,

// COMPAT: BeforeInput events aren't cancelable on android, so we have to handle them differently using the android input manager.

// COMPAT: Browsers will collapse trailing new lines at the end of blocks,

// COMPAT: Certain browsers don't handle the selection updates

// COMPAT: Certain browsers don't support the `beforeinput` event, so we

// COMPAT: Certain browsers don't support the `beforeinput` event, so we'd

// COMPAT: Edge has a bug where Range.prototype.toString() will

// COMPAT: For the deleting forward/backward input types we don't want

// COMPAT: Having the `data-` attributes on these leaf elements ensures that

// COMPAT: If a void node is selected, or a zero-width text node

// COMPAT: If someone is clicking from one Slate editor into another,

// COMPAT: If the current `activeElement` is still the previous

// COMPAT: If the editor has nested editable elements, the focus

// COMPAT: If the end node is a void node, we need to move the end of the

// COMPAT: If the selection is expanded, even if the command seems like

// COMPAT: If the start node is a void node, we need to attach the encoded

// COMPAT: If the text is empty, it's because it's on the edge of an inline

// COMPAT: If this is the last text node in an empty block, render a zero-

// COMPAT: If we are writing inside a placeholder, the ime inserts the text inside

// COMPAT: In Chrome and Safari, if we don't add the `white-space` style

// COMPAT: In Chrome, `beforeinput` events for compositions

// COMPAT: In Firefox, `caretRangeFromPoint` doesn't exist. (2016/07/25)

// COMPAT: In Firefox, it's not enough to create a range, you also need

// COMPAT: In Firefox, reading `target.nodeType` will throw an error if

// COMPAT: In iOS, some of these hotkeys are handled in the

// COMPAT: In read-only editors the leaf is not rendered.

// COMPAT: React doesn't batch `setState` hook calls, which means that the

// COMPAT: Render text inside void nodes with a zero-width space.

// COMPAT: Safari doesn't always remove the selection even if the content-

// COMPAT: SelectionChange event is fired after the action is performed, so we

// COMPAT: Since we prevent the default behavior on

// COMPAT: Swiftkey has a weird bug where the target range of the 2nd word

// COMPAT: The composition end event isn't fired reliably in all browsers,

// COMPAT: The event should be ignored if the focus is moving from

// COMPAT: The event should be ignored if the focus is moving to a

// COMPAT: The event should be ignored if the focus is returning

// COMPAT: The selectionChange event is fired after the action is performed,

// COMPAT: There's a bug in chrome that always returns `true` for

// COMPAT: When deleting before a non-contenteditable element chrome only fires a beforeinput,

// COMPAT: While composing at the start of a text node, some keyboards put

// COMPAT: While setting the selection in an animation frame visually correctly sets the selection,

// COMPAT: use composition change events as a hint to where we should insert

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toArray.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Assets/images/bg_404.png

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Assets/images/projectManager.png

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Assets/images/spr_404.png

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Assets/images/spr_contacts31.png

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Buttons/Button/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Buttons/Button/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Calendar/CalendarInput/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Calendar/CalendarInput/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Calendar/DatePicker/Unit/Date/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Calendar/DatePicker/Unit/Dropdown/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Calendar/DatePicker/Unit/Time/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Calendar/DatePicker/Unit/Time/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Calendar/DatePicker/Unit/dateContext.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Calendar/DatePicker/Unit/dateData.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Calendar/DatePicker/Unit/makeArr.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Calendar/DatePicker/Unit/typeToDate.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Calendar/DatePicker/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Calendar/DatePicker/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Choose/Check/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Choose/Check/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Choose/CheckGroup/Unit/context.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Choose/CheckGroup/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Choose/Radio/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Choose/Radio/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Choose/RadioGroup/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/Accordion/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/Alert/Unit/mount.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/Alert/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/Alert/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/Avatar/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/Avatar/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/ColorPicker/Unit/ColorPalette/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/ColorPicker/Unit/colorConversion.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/Drag/Unit/getTransformAttr.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/Drag/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/Drag/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/FixedSizeText/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/FixedSizeText/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/PaginationV2/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/PaginationV2/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/Popover/Unit/defaultAttr.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/Popover/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/QuestionIcon/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/Rate/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/Scroll/Unit/setScrollBar.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/ToolTips/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataInput/AvatarCrop/Unit/Cropper/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataInput/AvatarCrop/Unit/Cropper/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataInput/AvatarCrop/Unit/CutImg/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataInput/AvatarCrop/Unit/CutImg/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataInput/AvatarCrop/Unit/SelectImage/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataInput/AvatarCrop/Unit/SelectImage/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataInput/AvatarCrop/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataInput/DropDownListV2/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataInput/GeneralInput/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataInput/GeneralInput/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataInput/ResetInput/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataInput/Slider/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataInput/Slider/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataInput/Switch/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataInput/Switch/styles.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataInput/TextAreaV2/Unit/getOverflowStatus.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataInput/TextAreaV2/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Dropdown/Dropdown/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Dropdown/Hooks/useDropdownClick.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Dropdown/Kite/Unit/autoPosition.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Dropdown/Kite/Unit/findDomNode.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Dropdown/Kite/Unit/kiteRoot.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Dropdown/Kite/Unit/position.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Dropdown/Kite/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Dropdown/Kite/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Feedback/Message/Unit/BottomMessage/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Feedback/Message/Unit/BottomMessage/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Feedback/Message/Unit/RightMessage/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Feedback/Message/Unit/RightMessage/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Feedback/Message/Unit/TopMessage/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Feedback/Message/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Feedback/notice/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Grid/Col/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Grid/Col/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Grid/Row/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Grid/Row/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Grid/Sidebar/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Grid/Sidebar/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Grid/Wrapper/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Grid/Wrapper/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Icon/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Loading/LoadingComponent/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Loading/LoadingComponent/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Loading/Skeleton/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Loading/Skeleton/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Dashboard/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Dashboard/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Language/Unit/Mobile/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Language/Unit/Pc/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Language/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Login/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Login/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Logo/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Logo/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Nav/Unit/Analysis&Report/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Nav/Unit/Distribution/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Nav/Unit/Introduction/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Nav/Unit/Mobile/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Nav/Unit/Mobile/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Nav/Unit/Pc/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Nav/Unit/Pc/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Nav/Unit/Plug-InEditor/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Nav/Unit/QuestionnaireEditor/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Nav/Unit/SubNav/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Nav/Unit/systemData.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Nav/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/NavigationBar/Unit/Management/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/NavigationBar/Unit/Mobile/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/NavigationBar/Unit/Mobile/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/NavigationBar/Unit/Product/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/NavigationBar/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/NavigationBar/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/SignUp/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Steps/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Steps/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/User/Unit/Mobile/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/User/Unit/Mobile/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/User/Unit/Pc/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/User/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/OIDCLogin/Api/interceptor.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/OIDCLogin/Api/redirectDomain.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/OIDCLogin/Unit/login/loginContext.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/OIDCLogin/Unit/projectContext/index.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Preview/FullImage/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Preview/FullImage/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Preview/PreviewImage/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Preview/PreviewImage/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Table/CustomTable/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Table/Main/Unit/content.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Table/Main/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Table/Table/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Table/Title/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Table/Unit/findScroll.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Table/Unit/getColumnProps.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Table/Unit/getKey.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Table/Unit/getStickyList.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Table/Unit/isTrue.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Table/Unit/tableContext.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/Background/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/Background/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/BlockButton/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/BlockButton/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/Color/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/Color/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/ColorList/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/Copy/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/Copy/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/Core/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/Core/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/FontSize/Unit/sizeList.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/FontSize/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/Image/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/Image/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/LockedEditor/styles.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/MagneticEditor/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/MarkButton/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/MarkButton/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/Tool/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/Tool/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/Unit/leaf.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/Unit/toHtml.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Transition/Transition/Unit/addClass.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Transition/Transition/Unit/forceReflow.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Transition/Transition/Unit/initClassName.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Transition/Transition/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Zmz/Authorization/Unit/Item.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Zmz/Contacts/Unit/SearchInput/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Zmz/Keyword/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Zmz/LoadingV2/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Zmz/Progress/Unit/line.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Zmz/TimePickerV2/Unit/TimeColumn/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Zmz/TimePickerV2/Unit/TimeColumn/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Zmz/TimePickerV2/Unit/TimeWrap/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Zmz/TimePickerV2/Unit/TimeWrap/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/Calendar/index.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/DataInput/avatarCrop.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/DataInput/resetInput.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/Feedback/message.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/Navigation/navigationBar.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/TextEditor/blockBtn.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/TextEditor/color.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/TextEditor/colorList.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/TextEditor/copy.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/TextEditor/fontSize.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/TextEditor/image.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/TextEditor/markButton.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/Zmz/downloadCard.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/Zmz/loadingV2.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Unit/getPosition.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Unit/utils.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/webpack/assets/js/index.js

// CONCATENATED MODULE: ./node_modules/@redux-saga/deferred/dist/redux-saga-deferred.esm.js

// CONCATENATED MODULE: ./node_modules/dr_position/src/codegrid.js

// CONCATENATED MODULE: ./node_modules/dr_position/src/tiles/index.js

// CONCATENATED MODULE: ./node_modules/i18next/dist/esm/i18next.js

// CPS (ie node style functions) can define their own cancellation logic

// Cache hit

// Cache of json file across zoom levels

// Calculate EC codewords for this data block

// Calculate EC for this data block

// Calculate how far into the text node the `nearestNode` is, so that we

// Calculate penalty

// Calculate required number of bits

// Callback after initialization

// Capture values for checking if and when this component unmounts

// Cause a re-render to restore the dom state if we encounter tracked mutations without

// Chameleons count as word characters as long as they're in a word, so

// Character (grapheme cluster) boundaries are determined according to

// Character count indicator + mode indicator bits

// Check if the specified version can contain the data

// Chrome also has issues correctly editing the end of anchor elements: https://bugs.chromium.org/p/chromium/issues/detail?id=1259100

// Chrome has issues correctly editing the start of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1249405

// Chrome has issues with the presence of tab characters inside elements with whiteSpace = 'pre'

// Class for a single utf-grid

// Clean up request

// Clear any formats applied to the cursor if the selection changes.

// Clear buffered mutations to ensure we don't undo them twice

// Clear pending calls to getCode

// Compat: Android IMEs try to force their selection by manually re-applying it even after we set it.

// Compile all the patterns before compilation.

// Compile all the tokens into regexps.

// Completion callback passed to the appropriate effect runner

// Composition change types occur while a user is composing text and can't be

// Configuration. Should match generator settings

// Convert from short to long form (fff -> ffffff)

// Convert result to a 13-bit binary string

// Copy axios.prototype to instance

// Copy context to instance

// Cost of s to u plus the cost of u to v across e--this is *a*

// Costs of shortest paths from s to all nodes encountered.

// Costs of shortest paths from s to all nodes encountered; differs from

// Create a fake selection so that we can add a Base64-encoded copy of the

// Create final data

// Create the default instance to be exported

// DCE check should happen before ReactDOM bundle executes so that

// DOM if we don't prevent them, so we have to.

// Deep Recursion Algorithm

// Default to a dummy "batch" implementation that just runs the callback

// Define some constant arrays just to avoid re-creating these

// Determine the new offset inside the text node.

// Determine whether the node should have block or inline children.

// DevTools can report bad minification during injection.

// Discard mutations caused during render phase. This works due to react calling

// Distinguish between actual "data" props that were passed to the wrapper component,

// Divide the buffer into the required number of blocks

// Don't bother if no value provided

// Don't run stale listeners.

// ESM COMPAT FLAG

// EXPORTS

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js

// EXTERNAL MODULE: ./node_modules/@redux-saga/core/dist/io-40341e1a.js

// EXTERNAL MODULE: ./node_modules/@redux-saga/delay-p/dist/redux-saga-delay-p.esm.js

// EXTERNAL MODULE: ./node_modules/@redux-saga/is/dist/redux-saga-is.cjs.js

// EXTERNAL MODULE: ./node_modules/@redux-saga/symbols/dist/redux-saga-symbols.cjs.js

// EXTERNAL MODULE: ./node_modules/axios/index.js

// EXTERNAL MODULE: ./node_modules/i18next/dist/esm/i18next.js + 15 modules

// EXTERNAL MODULE: ./node_modules/react-dom/client.js

// EXTERNAL MODULE: ./node_modules/react-dom/index.js

// EXTERNAL MODULE: ./node_modules/react/index.js

// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js

// EXTERNAL MODULE: ./node_modules/slate-history/dist/index.js

// Effect callback, extracted: assign the latest props values to refs for later usage

// Effect callback, extracted: subscribe to the Redux store or nearest connected ancestor,

// Either this is the first call, activity has stopped and we're at the

// Else resolve a range from the caret position where the drop occured.

// Enable batched updates in our subscriptions for use

// Ending with a TASK_CANCEL will propagate the Cancellation to all joiners

// Ensure headers exist

// Ensure range considered is capped to `range`, in the

// Ensure selection is inside the mark placeholder

// Ensure that all the modifiers are set to false unless the hotkey has them.

// Ensure that block and inline nodes have at least one text child.

// Ensure that inline nodes are surrounded by text nodes.

// Ensure that text content is rendered on server-side rendering

// Ensure that the nodes are equivalent, and figure out what the position

// Ensure the current pending diffs originating from changes before the addMark

// Ensure we don't restore the pending user (dom) selection

// Ensure we insert text with the marks the user was actually seeing

// Equivalent to this, but presumably more performant:

// Estimate best version that can contain raw splitted segments

// Expose Axios class to allow class inheritance

// Expose AxiosError class

// Expose Cancel & CancelToken

// Expose all/spread

// Expose isAxiosError

// Extend the buffer to fill the data capacity of the symbol corresponding to

// Factory for creating new instances

// Find best mask pattern

// Find the last text node inside the anchor.

// Find the range where the drop happened

// First coord is always 6

// First parameter (optional): URL path to the tiles directory

// Flatten headers

// Flush native operations, as native events will have propogated

// For SSR situations HAS_BEFORE_INPUT_SUPPORT is false and results in prop

// For Thai script, deleting N character(s) backward should delete

// For browsers use XHR adapter

// For characters with Shift JIS values from 0x8140 to 0x9FFC:

// For characters with Shift JIS values from 0xE040 to 0xEBBF

// For each leaf, we need to isolate its content, which means filtering

// For void nodes, the element with the offset key will be a cousin, not an

// Force an array if not already something iterable

// GB11

// GB12 and GB13

// GB6

// GB7

// GB8

// GB9

// GB9a

// GB9b

// Get json tile path

// Get nodes adjacent to u...

// Get the cost of the edge running from u to v.

// Get the highest nodes that are completely inside the range, as well as

// Get the min version that can contain data

// HACK: better way?

// HTTP basic authentication

// Handle browser request cancellation (as opposed to a manual cancellation)

// Handle cancellation

// Handle invocations in a tight loop.

// Handle low level network errors

// Handle progress if needed

// Handle timeout

// Headers whose duplicates are ignored by node

// Helper:

// IE needs attribute set twice to normalize properties

// If React sees the exact same element reference as last time, it bails out of re-rendering

// If `leafText` has caught up with `blockText` (distance=0),

// If `leafText` is exhausted, break to get a new leaf node

// If coefficients number in remainder are less than genPoly degree,

// If estimated version is undefined, try with the highest version

// If has modified constructor

// If has modified prototype

// If it's a block node with inline children, add the proper `dir` attribute

// If it's a void node, wrap the children in extra void-specific elements.

// If it's an element node, its offset refers to the index of its children

// If no version is found, data cannot be stored

// If not specified, use min version as default

// If starting a drag on a void node, make sure it is selected

// If the DOM selection is in the editor and the editor selection is already correct, we're done.

// If the DOM selection is properly unset, we're done.

// If the bit string is fewer than four bits shorter, add only the number of 0s that

// If the bit string is more than four bits shorter than the required number of bits,

// If the bit string is shorter than the total number of required bits,

// If the child props haven't changed, nothing to do here - cascade the subscription update

// If the drop target is inside a void node, move it into either the

// If the editable child found is in front of input offset, we instead seek to its end

// If the insert point is at the edge of an inline node, move it outside

// If the move does not happen within a single parent it is possible

// If the move happens completely within a single parent the path and

// If the node doesn't exist in the tree, it does not need to be normalized.

// If the node has children, traverse until we have a leaf node. Leaf nodes

// If the node isn't already the next sibling of the previous node, move

// If the number of input data characters is not a multiple of two,

// If the number of input digits is not an exact multiple of three,

// If the old and new path are the same, it's a no-op.

// If the path exists, push it onto the end.

// If the range encompasses the entire leaf, add the range.

// If the range expanded and match the leaf, or starts after, or ends before it, continue.

// If the range is collapsed in a non-empty node and 'split' is true, there's nothing to

// If the range is collapsed, make sure to use the same affinity to

// If the render was from a store update, clear out that reference and cascade the subscriber update

// If the start or end points are inside an inline void, nudge them out.

// If the status is CANCELLED, then we do not need to change it here

// If the target is a path, the default height-skipping and position

// If the target node that we're merging with is empty, remove it instead

// If there was going to be an empty ancestor of the node that was merged,

// If there's a match and it's lower than the last, update the hit.

// If we do not reverse the order and call it from top to the bottom, it will remove all blocks

// If we have new child props, and the same wrapper props, we know we should use the new child props as-is.

// If we haven't visited v yet OR if the current known cost from s to

// If we're allowed to go downward and we haven't descended yet, do.

// If we're at the root and we can't go down, we're done.

// If we're going backward...

// If we're going forward...

// If we're inside a void node, force the offset to 0, otherwise the zero

// If we're not subscribed to the store, nothing to do here

// If we've arrived at a leaf text node that is not lower than the last

// Ignore already escaped sequences.

// Ignore, dom and state might be out of sync

// Important!

// In React >= 17 onFocus and onBlur listen to the focusin and focusout events during the bubbling phase.

// In highest mode any node lower than the last hit is not a match.

// In lowest mode we emit the last hit, once it's guaranteed lowest.

// In non-strict mode we allow a slash at the end of match. If the path to

// In that case, throw the error from here so it doesn't get lost.

// In the Shift JIS system, Kanji characters are represented by a two byte combination.

// In the nodes remaining in graph that have a known cost from s,

// Inline element nodes are ignored as they don't themselves

// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of

// Inlined version of the `symbol-observable` polyfill

// Input data characters are divided into groups of two characters

// Interleave the data and error correction codewords from each block

// Invalid character

// Invoke the leading edge.

// It's possible that we caught an error due to a bad mapState function, but the

// Iterate over array values

// Iterate over object keys

// Iterate over the tokens and create our regexp string.

// JIS X 0208 gives details of the shift coded representation.

// Keep a reference to the dragged range before updating selection

// Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

// Keep track of some state for the event handler logic.

// L  M  Q  H

// Last coord is always (size - 7)

// Listen for ready state to emulate onloadend

// Listen on the native `beforeinput` event to get real "Level 2" events. This

// Listen on the native `selectionchange` event to be able to update any time

// Long-press events (hold a + press 4 = ä) to choose a special character otherwise

// Make sure attach is non-empty, since empty nodes will not get copied.

// Make sure data can be encoded

// Make sure the DOM selection state is in sync.

// Manage grids of one zoom level

// Match Express-style parameters and un-named parameters with a prefix

// Match any characters still remaining.

// Match escaped characters that would otherwise appear in future matches.

// Matches logic in React's `shared/ExecutionEnvironment` file

// Merge adjacent text nodes that are empty or match.

// Microsoft

// Mozilla

// Multiply most significant byte of result by 0xC0

// N code point(s) instead of an entire grapheme cluster.

// Not all browsers support upload events

// Not used

// Note: `onDragEnd` is only called when `onDrop` is not called

// Now that all that's done, we can finally try to actually render the child component.

// Omit new properties from the old properties list

// Omit properties that have been removed from the new properties list

// Only allow block nodes in the top-level children and parent blocks

// Only insertText operations use the native functionality, for now.

// Only invoke if we have `lastArgs` which means `func` has been

// Only use native character insertion for single characters a-z or space for now.

// Only when the target is void, call `preventDefault` to signal

// Optimization: double the size of the anti-log table so that we don't need to mod 255 to

// Otherwise add header to the request

// Otherwise the DOM TextNode would always be replaced by React as the user types, which interferes with native text features,

// Otherwise the DOM selection is out of sync, so update it.

// Otherwise we need to split the leaf, at the start, end, or both,

// Otherwise we're going upward...

// PERF: Exit early if the operation is guaranteed not to have an effect.

// PERF: If the offset isn't `0` we know it's not the start.

// PERF: ensure the offsets are equal first since they are cheaper to check.

// PERF: exit early if we can guarantee that the range isn't hanging.

// PERF: in this case the move operation is a no-op anyways.

// Point references location after the diff

// Point references location inside the diff => transform the point based on the location

// Potentially expand to single character deletes, as well.

// Predecessor map for each node that has been encountered.

// Prefix data with character count indicator.

// Prepare data buffer

// Prepare the response

// Prepend partial segment prefixes.

// Preserve adjacent whitespace and new lines.

// Prevent the default outline styles.

// Proof that upon completion, we've exahusted both leaf and block text:

// Proof that we always exhaust text nodes before encountering a new one:

// Provide aliases for supported request methods

// Public function for retrieving country codes

// Pull data from the store after first render in case the store has

// Push the current path onto the tokens.

// RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed

// Race Auto cancellation

// React currently throws a warning when using useLayoutEffect on the server.

// React v16.11 and below

// React v16.12 and above

// Real errors are hidden from us by the browser

// Reducer initial state creation for our update reducer

// Redux doesn't guarantee unsubscriptions happen until next dispatch.

// References:

// Remove Content-Type if data is undefined

// Remove any zero-width space spans from the cloned DOM so that they don't

// Remove diff only after we have applied it to account for it when transforming

// Render text content immediately if it's the first-time render

// Replace format info bits with correct values

// Reset `leafText` counters for new text node.

// Reset any `maxWait` timer.

// Resolve a Slate range from the DOM range.

// Restart the timer.

// Restore the actual user section if nothing manually set it.

// Return max number of storable codewords

// Return the distance in offsets for a step of size `unit` on given string.

// Return the node and offset.

// Save references to the new child props.  Note that we track the "child props from store update"

// Search in nextzoomGrids

// Search in zoomGrids

// Second parameter (optional): worldGrid object (parsed JSON)

// Selection was manually set, don't restore the user selection after the change.

// Send the request

// Set a `data-slate-fragment` attribute on a non-empty node, so it shows up

// Set config.method

// Set the request timeout in MS

// Setting status to CANCELLED does not necessarily mean that the task/iterators are stopped

// Since lowest is always emitting one behind, catch up at the end.

// Since we'll be applying operations while iterating, keep track of an

// Skip if position is occupied by finder patterns

// Skip native if there are marks, as

// So the node can contain selection but the text is not visible.

// So writing 'some text' will result in 'some ttext'. If we force a IME update

// So, we'll use the child props from store update only if the wrapper props are the same as last time.

// Some IMEs/Chrome extensions like e.g. Grammarly set the selection immediately before

// Special case to handle the `+` key since we use it as a separator.

// Specifically not if we're in a web worker, or react-native.

// Split the string at the previously found distance and use the

// Standard

// Standard browser envs have full support of the APIs needed to test

// Start the timer for the trailing edge.

// Subtract 0x8140 from Shift JIS value

// Subtract 0xC140 from Shift JIS value

// Successfully walked `distance` offsets through `leafText`

// Supply a getter just to skip dealing with ESM bindings

// TODO Can this get pulled out so that we can subscribe directly to the store if we don't need ownProps?

// TODO This is hacky and not how `uSES` is meant to be used

// TODO This is incredibly hacky. We've already processed the store update and calculated new child props,

// TODO We're currently calling getState ourselves here, rather than letting `uSES` do it

// TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing

// TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.

// TODO: Add more comments

// Target add/remove is tracked. Track the mutation if we track the parent mutation.

// The QR code specification says to use byte-wise modulo 100011101 arithmetic.

// The WeakMap which maps a key to a specific HTMLElement must be scoped to the editor instance to

// The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.

// The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it

// The character count indicator is a string of bits that represents the

// The character count indicator must be placed after the mode indicator

// The character value of the first character is multiplied by 45

// The character value of the second digit is added to the product

// The custom event handler may return a boolean to specify whether the event

// The error correction codewords are the remainder after dividing the data codewords

// The input data string is divided into groups of three digits,

// The primary entry point assumes we're working with standard ReactDOM/RN, but

// The request errored out and we didn't get a response, this will be

// The search location is from the start of the document to the path of

// The selector returned by selectorFactory will memoize its results,

// The status here may be RUNNING or CANCELLED

// The sum is then stored as 11-bit binary number

// The text is not rendered as part of the virtual DOM, as since we handle basic character insertions natively,

// There are no core normalizations for text nodes.

// Therefore in order for <Editable />'s handlers to run first, which is necessary for ReactEditor.isFocused(editor)

// Therefore we don't allow native events to insert text at the end of anchor nodes.

// Therefore we must check that this path actually exists,

// Therefore, the remaining code points should be inserted back.

// These blocks will be replaced with correct values later in code.

// These byte values are shifted from the JIS X 0208 values.

// This Subscription's source should match where store came from: props vs. context. A component

// This action has a similiar effect to ActionTypes.INIT.

// This allows the user to escape special characters that won't transform.

// This attempts to reset the NODE_TO_KEY entry to the correct value

// This error was thrown as a convenience so that if you enable

// This essentially would make setting the slate selection during an update meaningless, so we force it

// This is "just" a `useLayoutEffect`, but with two modifications:

// This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}

// This is only done if running in a standard browser environment.

// This is the actual text rendering boundary where we interface with the DOM

// This is tricky, but since the `path` and `newPath` both refer to

// This is used to make sure we don't warn about the same

// This means that when a number is 256 or larger, it should be XORed with 0x11D.

// This shouldn't happen as long as we do top-down subscriptions correctly, but

// This was affecting the selection of multiple blocks and dragging behavior,

// To get around it, we can conditionally useEffect on the server (no-op) and

// To maintain the wrapperProps object reference, memoize this destructuring.

// Total codewords for this QR code version (Data + Error correction)

// Total number of error correction codewords

// Transform all of the points in the value, but if the point was in the

// Transform request data

// Transform response data

// Tricky logic here:

// Trigger the React `useSyncExternalStore` subscriber

// UNUSED EXPORTS: Accordion, Attachment, Authorization, BlockButton, CalendarInput, Cascade, Charts, Col, ColorPicker, Contacts, ContactsV2, Counter, CounterV2, Criteria, DatePicker, Divider, DownloadCard, Drag, DropDownInput, DropDownList, EditorBackground, EditorColor, EditorContext, EditorCopy, EditorCore, EditorFontSize, EditorImage, Error, ErrorV2, FixedSizeText, FoldingCard, Footer, FooterV2, FullImage, Gcode, GoogleMap, HideList, IconDropDownList, Keyword, Keywords, Labels, ListRetrieval, Loading, LockedEditor, MagneticEditor, MarkButton, MergeInput, MobileInput, MobileInputV2, MultiDropDown, Navigation, NavigationDashboard, NavigationLink, NavigationLogin, NavigationSignUp, NavigationUser, OIDCLogin, Pagination, PasswordInput, PreviewDisplay, PreviewImage, Progress, QRCode, QuestionIcon, Rate, ResetInput, SearchInput, SelectInput, Table, TableBody, TableHeader, TagCard, TextArea, TextAreaV2, TextEditTool, TimePickerV2, ToolTips, TranslateText, UnderConstruction, Upload, Wrapper, XLSX, addZero, dataToSheet, descendantToReactNode, drUtils, encode, filterDescendant, getDescendantLength, getDeviceType, getJwtKey, getProperty, getUniqueId, initDescendant, isTrue, nextFrame, setFileName, sheetToData, useLoginStatus, withEditor

// US-ASCII

// Undo previously applied mask

// Universal defers to ensure that the match occurs in every branch, so we

// Update EDITOR_TO_MARK_PLACEHOLDER_MARKS in setTimeout useEffect to ensure we don't set it

// Update element-related weak maps with the DOM element ref.

// Update internal state on each render.

// Use Byte mode as default

// Use Mode.BYTE if Kanji support is disabled

// Use a negative lookahead to match only capturing groups.

// Use higher error correction level as default

// Use onloadend if available

// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,

// Utility functions

// Verify that the code above has been dead code eliminated (DCE'd).

// Void nodes are a special case, so by default we will always

// We always exhaust block nodes before encountering a new one:

// We don't have a core behavior for these, but they change the

// We get TERMINATE flag, i.e. by taking from a channel that ended using `take` (and not `takem` used to trap End of channels)

// We have to use a class component here since we rely on `getSnapshotBeforeUpdate` which has no FC equivalent

// We memoize the elements for the rendered child component as an optimization.

// We need this to execute synchronously every time we re-render. However, React warns

// We want to capture the wrapper props and child props we used for later comparisons

// We'll run this callback every time a store subscription update propagates to this component

// When a store is created, an "INIT" action is dispatched so that every

// When dragging from another source into the editor, it's possible

// When dropping on a different droppable element than the current editor,

// When performing a sibling move to a later index, the path at the destination is shifted

// When there is an inline element, e.g. a link, and you select

// When using keyboard English association function, conpositionEnd triggered too fast, resulting in after `insertText` still maintain association state.

// While the child is a comment node, or an element node with no children,

// With one exception: request that using file: protocol, most browsers

// XXX: Do we actually need both `costs` and `open`?

// Yield position at the start of node (potentially).

// Yield positions every (dynamically calculated) `distance` offset.

// You can't set properties on the editor node.

// [1] https://www.unicode.org/reports/tr29/#Default_Grapheme_Cluster_Table

// [2] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakProperty.txt

// [3] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.html

// [4] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.txt

// `beforeinput` events, the browser doesn't think there's ever

// `costs` in that it provides easy access to the node that currently has

// `insertText` will insert a node, not just text.

// `isCollapsed` for a Selection that comes from a ShadowRoot.

// `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in

// `onDrop` is not called. So we need to clean up in `onDragEnd` instead.

// `undefined` instead of `null` to make default parameter work

// a corresponding pending action.

// a delete forward/backward command it should delete the selection.

// a list item of the check list example).

// a terminator of up to four 0s must be added to the right side of the string.

// about useLayoutEffect in SSR, so we try to detect environment and fall back to

// actualChildProps: unknown,

// add binary data sequence to buffer

// add four 0s to the end.

// adjacent to an inline is selected, we need to handle these

// after inserting the first word, swiftkey will insert with the correct offset

// after the original move path.

// again here. We can't only do it in the setTimeout after the animation frame since that would cause a

// alias for CanceledError for backward compatibility

// allow detectFactoryAndVerify to get ownProps

// allowing connect's shouldComponentUpdate to return false if final

// ancestor, so find it by going down from the nearest void parent and taking the

// and 00010001 (0x11) alternately.

// and add least significant byte to product

// and add the range to the middle intersecting section. Do the end

// and data mode

// and each group is converted to its 10-bit binary equivalent.

// and encoded as 11-bit binary codes.

// and extra properties of the merge will be.

// and find the original path. We can accomplish this (only in non-sibling)

// and if blockText is exhausted, break to get another block node,

// and must be a certain number of bits long, depending on the QR version

// and non-standard so it doesn't fire until after a selection has been

// and optional suffixes. Matches appear as:

// and set distance to the overflow amount, so we'll (maybe)

// and spellcheck work as expected.

// and that it still refers to the same node.

// and the DOM focus is an Element

// and those commands determine that for themselves.

// and thus it doesn't transform selection on its own

// and values needed to control behavior (forwarded refs, alternate context instances).

// and we can correctly compare DOM text values in components

// and we don't add it for line-breaks.

// and yield this position in this node.

// any history stack to undo or redo, so we have to manage these

// anything else returned as is

// append zoom, x, y into zGrids and return

// are applied with the current formatting

// are needed to reach the required number of bits.

// aren't composing any more.

// aren't correct and never fire the "insertFromComposition"

// as a ref instead of a useState/useReducer because we need a way to determine if that value has

// as apply() changes the object reference and hence invalidates the NODE_TO_KEY entry

// as this effectively replaces "specifying the text in the virtual DOM under the <span> below" on each render

// attaching it to empty `<div>/<span>` nodes will end up having it erased by

// attempts to reposition its cursor to match the native position. Use

// auto height

// available, otherwise a store update may happen between render and the effect,

// avoid collisions between editors in the DOM that share the same value.

// avoid the two points passing each other and expanding in the opposite

// because onClick handlers can change the document before we get here.

// been processed.  If this went into useState/useReducer, we couldn't clear out the value without

// before we receive the composition end event.

// bottom-left

// built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose

// built-in `onSelect` handler doesn't fire for all selection changes. It's a

// but Slate's value is not being updated through any operation

// by a generator polynomial

// by any combination of letters, digits, plus, period, or hyphen.

// by setting cancel field on the cb

// c.f. https://nodejs.org/api/http.html#http_message_headers

// calc text

// can be either text nodes, or other void DOM nodes.

// can determine what the offset relative to the text node is.

// can go to them. In Firefox, this must be prevented because it

// can-promise has a crash in some versions of react native that dont have

// cancelled. Let them through and wait for the composition to end.

// case "bulleted-list":

// case "heading-five":

// case "heading-four":

// case "heading-one":

// case "heading-six":

// case "heading-three":

// case "heading-two":

// case "link":

// case "list-item":

// case "numbered-list":

// case "pre":

// case "quote":

// catch synchronous failures; see #152

// catch synchronous failures; see #152 and #441

// catch up to blockText in the next leaf text node.

// causes duplicate inserts.

// causing abnormal insert behavior: https://bugs.chromium.org/p/chromium/issues/detail?id=1219139

// changed

// changed since we began.

// check error in parameters

// check for updates after dispatched actions, and trigger re-renders.

// check if already loaded

// children and selection can get out of sync for one render pass. So we

// children do.

// common use case when inserting from a non-selected state.

// composition text if we aren't composing to work around https://github.com/ianstormtaylor/slate/issues/5038

// connected to the store via props shouldn't use subscription from context, or vice versa.

// const cRef = useRef<HTMLDivElement | null>(null);

// const getLanguageByIpAddress = () => {

// const getRTCPeerConnection = () => {

// const offsetY = thickness / 2;

// const originPoint = (reverse: boolean): [number, number] | undefined => {

// const timerValue = timer.current;

// content = <></>;

// content, since the spacer is before void's content in the DOM.

// contenteditable behaviors. (2019/05/08)

// contribute to `blockText` or `leafText` - their parent and

// convert \n into \r\n. The bug causes a loop when slate-react

// coordinates are closest to.

// cost from s to v that may or may not be less than the current

// cost of u to v across e), update v's cost in the cost list and

// counters need to account for us potentially splitting at a non-leaf.

// create an irreducible generator polynomial

// current month;

// debounced at least once.

// decode

// default bottom

// default left

// default right

// default top

// default, and calling `preventDefault` hides the cursor.

// defensive measure

// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args

// direction

// do not bubble up synchronous failures for detached forks

// domSelection is not necessarily a valid Slate range

// don't hoist over string (html) components

// don't rerender on equalityFn change since we want to be able to define it inline

// draw text

// draw textbox

// editable element no longer has focus. Refer to:

// editor to stay focused when the tab becomes focused again.

// effects in the iterator's finally block will still be executed

// eg makes native spellcheck opt out from checking the text node.

// element inside a void node).

// ends since it will already have been committed to the DOM.

// eslint-disable-next-line consistent-return

// eslint-disable-next-line func-names

// eslint-disable-next-line no-eq-null,eqeqeq

// eslint-disable-next-line no-param-reassign

// eslint-disable-next-line no-redeclare

// eslint-disable-next-line no-undef

// eslint-disable-next-line no-unused-vars

// eslint-disable-next-line react-hooks/exhaustive-deps

// eslint-disable-next-line strict

// exactly if and only if its current content does not match our current virtual DOM.

// explicitly set this

// extends data size to data+genPoly size

// extract a block of data from buffer

// extracted by mini-css-extract-plugin

// fall back to React's leaky polyfill instead just for it. It

// fall back to guessing at the input intention for hotkeys.

// filter out skipped interceptors

// find the node, u, that currently has the shortest path from s.

// fire for any change to the selection inside the editor. (2019/11/04)

// first one that isn't inside a nested editor.

// first, and then afterwards for the correct `element`. (2017/03/03)

// fixed module

// for debug

// for text direction.

// for the move to impact the true path to the location where the node

// force reflow to put everything in position

// forceComponentUpdateDispatch: React.Dispatch<any>,

// forcing another re-render, which we don't want.

// fragment to the HTML, to decode on future pastes.

// fragment to the void node's content node instead of the spacer, because

// globalThis is undefined in older browsers

// handled by onerror instead

// hanging selection.

// have to manually get the selection here to ensure it's up-to-date.

// have to use hacks to make these replacement-based features work.

// have to use this unstable API to ensure it batches them. (2019/12/03)

// hit reducers

// hit, then we've found a branch that doesn't include a match, which

// horizontal

// hotkeys manually because browsers won't be able to skip over

// hotkeys ourselves. (2019/11/06)

// http://fb.me/prop-types-in-prod

// http://javascript.about.com/od/problemsolving/a/modulobug.htm

// http://wiki.openstreetmap.org/wiki/Slippy_map_tilenames

// https://bugs.chromium.org/p/chromium/issues/detail?id=447523

// https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10291116/

// https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value

// https://github.com/facebook/react/issues/11211

// https://github.com/facebook/react/issues/14259#issuecomment-439702367

// https://github.com/facebook/react/issues/5785

// https://github.com/ianstormtaylor/slate/issues/1819

// https://github.com/soldair/node-qrcode/issues/157

// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae

// https://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web

// i.e. a generator function returns an iterator

// if (leaf.code) {

// if prevNode is first child in parent,don't remove it.

// if the selection is a hanging range that ends in a void

// if there's no matching parent - usually means the node is an editor - don't do anything

// if we ever do those wrong, this throw will surface the error in our tests.

// in certain misbehaving browsers they aren't weirdly cloned/destroyed by

// in non-ending mode, where "/test/" shouldn't match "/test//route".

// in some cases, a decoration needs access to the range / selection to decorate a text node,

// in the HTML, and can be used for intra-Slate pasting. If it's a text

// in the correct order we increment toRef to account for that

// in this case and thus never actually perform the action.

// including comment nodes, so try to find the right text child node.

// index that accounts for any added/removed nodes.

// initialise

// inserted after a mark placeholder is inserted with a anchor offset off by 1.

// inserted next to it still.

// instead create a failed task. See #152 and #441

// instead since it will need to be split otherwise.

// intentionally not specifying dependencies, so that this effect runs on every render

// is created synchronously, otherwise a store update may occur before the

// is re-rendered, the selectors are called again, and

// is required because React's `beforeinput` is fake and never really attaches

// is valid at the end of a path match, not in the middle. This is important

// isContentEditable exists only on HTMLElement, and on other nodes it will be undefined

// it as the trailing edge, or we've hit the `maxWait` limit.

// it doesn't update GBoards spellchecker state. We have to manually trigger a selection change after

// it so that it is before merging.

// it would pause the execution at this line.

// itself becomes unfocused, so we want to abort early to allow to

// just useEffect instead to avoid the warning, since neither will run anyway.

// keep iterating to find a sibling non-void, non-comment node.

// keys multiple times.

// kicks up the generator

// known cost to v.

// leaky polyfill that only fires on keypresses or clicks. Instead, we want to

// like cypress where cy.window does not work realibly

// match already ends with a slash, we remove it for consistency. The slash

// means the match is not universal.

// mismatch warning app moves to browser. Pass-through consumer props when

// monitors are expected to have a certain interface, let's fill-in any missing ones

// most browsers. (2018/04/27)

// movable bar

// moves by looking at the impact of the move operation on the node

// multiply by 2

// necessary. v is the node across the current edge from u.

// needed to avoid cross-origin issues on CodeSandbox

// needs to be manually focused.

// newPath are stable with respect to each other.

// next month

// next or previous node, depending on which side the `x` and `y`

// no combination of Error Correction Level and data mask pattern

// no selection, insert at the end of the document since that is such a

// node ID => cost

// node ID => predecessor node ID

// node that was removed we need to update the range or remove it.

// node, so we render a zero-width space so that the selection can be

// node, wrap it in a `<span>` so we have something to set an attribute on.

// node.js module exports

// non- editable section of an element that isn't a void node (eg.

// not CAN_USE_DOM (SSR) and default to falsy value

// null coalescing text to make sure we're not outputing "null" as a string in the extreme case it is nullish at runtime

// number of characters that are being encoded.

// of date. So instead of using the `op.newPath` directly, we

// of merging the two. This is a common rich text editor behavior to

// older versions that do not include `useSyncExternalStore` (React 16.9 - 17.x).

// one, this is due to the window being blurred when the tab

// onerror should only fire if it's a network error

// only works for the `insertText` input type.

// other (month || day)

// other inline nodes, or parent blocks that only contain inlines and

// other siblings that may have been rendered alongside them.)

// otherwise advance blockText forward by the new `distance`.

// pad the string on the right with 0s to make the string's length a multiple of 8.

// pad with 0s to the left to reach the needed number of coefficients

// parent re-rendered without this component and we're about to unmount.

// pending ranges.

// portalRef.current = el;

// pre month ;

// prefix data with mode indicator (4 bits)

// prettier-ignore

// prevent losing formatting when deleting entire nodes when you have a

// prevents cancelling an already completed effect

// prevents unnecessary cancellation

// probably be avoided if Subscription's listeners logic is changed to not call listeners

// programmatic access of paste events coming from external windows

// propagates cancel downward

// properly. In Chrome, the selection isn't properly extended.

// properties that were previously defined, but are now missing, must be deleted

// props have not changed.

// range from the void node's spacer span, to the end of the void node's

// readystate handler is calling before onerror or ontimeout handlers,

// real `beforeinput` events sadly... (2019/11/04)

// recurse to see if the next one is a word character or not.

// reducer returns their initial state. This effectively populates

// released. This causes issues in situations where another change happens

// remaining string for the next iteration.

// remove all zeros from buffer head

// removing the original position, the second step's path can be out

// resolve iterator

// resolve redirects and decompress

// results in issues with keyboard navigation. (2017/03/30)

// return EC data blocks (last n byte, where n is the degree of genPoly)

// right after it (the start of the next node).

// set public members

// set selection.

// set that won't get normalized away

// setup cancellation logic on the parent cb

// shall be treated as being handled or not.

// should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized

// show up elsewhere when pasted.

// similar to x >= 256, but a lot faster (because 0x100 == 256)

// since the document and dom state do not match.

// since the masking operation must be performed only on the encoding region.

// so enabled only if the selection has been collapsed.

// so that it shows up in the selection's fragment.

// so we have to manually schedule it to ensure we don't 'throw away' the selection

// so we need to add an extra trailing new lines to prevent that.

// so we should call onloadend on the next 'tick'

// so we sometimes might end up stuck in a composition state even though we

// split first since we don't need to update the offset that way.

// standard global objects

// start/end edge cases where block extends beyond range.

// stay inside the bounds (because we will mainly use this table for the multiplication of

// stepper arrow on a number input). (2018/05/04)

// string.

// subscription callback always has the selector from the latest render commit

// subscription is created and an inconsistent state may be observed

// target is originating from an internal "restricted" element (e.g. a

// text.

// textContent.length instead.

// that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.

// that drops are allowed. Editable content is droppable by

// that have been unsubscribed in the  middle of the notification loop.

// that only contain block nodes. Similarly, only allow inline nodes in

// that the current editor does not have focus.

// that wrap target node. So we reverse the order.

// the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)

// the animation frame to ensure it displays the correct state.

// the character value of the final character is encoded as a 6-bit binary number.

// the context consumer to use

// the cost of the shortest paths to any or all of those nodes as

// the default grapheme cluster boundary specification, extended grapheme clusters variant[1].

// the diff will be applied to and add the offset inside the diff.

// the editor to inside a void node's spacer element.

// the final one or two digits are converted to 4 or 7 bits respectively.

// the initial state tree.

// the known shortest path from s.

// the middle of the notification loop, where `subscription` will then be null. This can

// the new state tree with any relevant data from the old one.

// the operation was applied.

// the placeholder itself and thus includes the zero-width space inside edit events.

// the point before the location passed in

// the same snapshot in time, there's a mismatch. After either

// the select event fires twice, once for the old editor's `element`

// the selection changes. This is required because React's `onSelect` is leaky

// the span is intentionally same on every render in virtual DOM, actual rendering happens in the layout effect above

// the start and end nodes.

// the text content inside the zero width space.

// the void node with the zero-width space not being an empty

// then its children might just change - DOM responds to it on its own

// then leading and trailing spaces will be ignored. (2017/09/21)

// then return the task descriptor to the caller

// then we will iterate over their content.

// then you will select the whole text node when you select part the of text

// there can be only a single saga error created at any given moment

// therefore not reporting its length accurately..

// this function wraps mapToProps in a proxy function which does several things:

// this is the core logic that lets you know you got the right editor.selection instead of null when editor is contenteditable="false"(readOnly)

// this magic zIndex="-1" will fix it

// this match getFnCallDescriptor logic

// this state will store the image when user uploard

// timerValue && window.clearTimeout(timerValue);

// to before the insertion point instead of after. To ensure our group of nodes are inserted

// to catch up with `blockText`, so we can reset `distance`

// to change the selection because it is the range that will be deleted,

// to determine what the child props should be

// to focus the contenteditable element too. (2016/11/16)

// to its direct text and zero-width spans. (We have to filter out any

// to return the correct value, we have to listen to the focusin and focusout events without useCapture here.

// to run code synchronously immediately before react commits the component update to the DOM.

// to stop rendering, so that browser functions like autocorrect

// to support expected plain text.

// to the editor from an embedded editable element (eg. an <input>

// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine

// to the real event sadly. (2019/11/01)

// top-left

// top-right

// tracks down the current cancel

// trailing edge, the system time has gone backwards and we're treating

// transform `op.path` to ascertain what the `newPath` would be after

// triggering a `beforeinput` expecting the change to be applied to the immediately before

// two GF numbers, no more).

// type that we need. So instead, insert whenever a composition

// unhang the range to avoid mistakenly including the void

// unwrapNode will call liftNode which does not support splitting the node when nested.

// update v's predecessor in the predecessor list (it's now u).

// updating the DOM is not a one way dataflow anymore. What we need here is not reconciliation and diffing

// urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

// use React's forwardRef to expose a ref of the wrapped component

// use a weak comparison instead of 'instanceof' to allow

// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store

// useLayoutEffect synchronously after the render phase before the next tick.

// useLayoutEffect(() => {

// useLayoutEffect: updating our span before browser paint

// user handled the error, we can clear bookkept values

// utils is a library of generic helper functions non-specific to axios

// v is greater than the new cost we just found (cost of s to u plus

// verify that the dom selection is in the editor

// vertical

// visible flicker.

// was removed from and where it was inserted. We have to adjust for this

// we ignore all errors here, since when the component

// we know that it won't be needed anymore and we need to clear it

// we remove it from the tree.

// we've dumped the saga stack to string and are passing it to user's code

// when <Editable/> is being controlled through external value

// whether mapToProps needs to be invoked when props have changed.

// whether the request URL is of the same origin as current location.

// which may cause missed updates; we also must ensure the store subscription

// while a selection is being dragged.

// while rendering if we have pending changes.

// width space that will convert into a line break when copying and pasting

// width spacing character will result in an incorrect offset of 1

// will receive the previous state. This effectively populates

// will result in an all-zero data string

// will return status as 0 even though it's a successful request

// will throw again, if neither props nor store state

// window event add

// window event remove

// with previous version of the virtual DOM, but rather diffing with the actual DOM element, and replace the DOM <span> content

// with standard React renderers (ReactDOM, React Native)

// xor final data with mask pattern in order to ensure that

// year

// yield all of the matches after iterating.

// yield their first point. If the `voids` option is set to true,

// zoom in

// zoom out

// }

// }, [root]);

// };

// 一维当前图例下标

// 一维数组下标为 最后一个图例下标

// 二维当前数据下标

// 分组数据 最大分组值 || 数据数组 最大下标值

// 单组数据处理

// 堆叠 多组数据

// 多组数据 处理

// 当前偏移下标

// 未堆叠 多组数据

// 横向滚动条 element

// 水平线容器高度偏移 垂直居中值

// 纵向滚动条 element

// 给bar赋值样式

// 计算fn

// 设置水平线宽度

// 设置水平线描边颜色

// 设置虚线

//# sourceMappingURL=html-parse-stringify.js.map

//# sourceMappingURL=immer.cjs.production.min.js.map

//# sourceMappingURL=index.js.map

//# sourceMappingURL=react-router-dom.min.js.map

//# sourceMappingURL=react-router.min.js.map

//Cache miss

//btn visible

//request interceptors

//respondent interceptors

//以下属性 仅在custom的状态下生效

//是否做内部的交互

//溢出变点 状态判断

//等下看看这个

//结束的时候

//转化为blob

//这里添加翻译文件

//这里计算主容器的位置
