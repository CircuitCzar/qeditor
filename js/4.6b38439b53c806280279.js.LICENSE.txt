/*
       * Five types to be split:
       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>
       * <ins>A</ins>X<ins>C</ins><del>D</del>
       * <ins>A</ins><del>B</del>X<ins>C</ins>
       * <ins>A</del>X<ins>C</ins><del>D</del>
       * <ins>A</ins><del>B</del>X<del>C</del>
       */

/*
 * based on code from:
 *
 * @license RequireJS text 0.25.0 Copyright (c) 2010-2011, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/requirejs for details
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2010, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* --------------------------- * string END * --------------------------- */

/* .Ele */

/* 0 */

/* 1 */

/* 10 */

/* 100 */

/* 101 */

/* 102 */

/* 103 */

/* 104 */

/* 105 */

/* 106 */

/* 107 */

/* 108 */

/* 109 */

/* 11 */

/* 110 */

/* 111 */

/* 112 */

/* 113 */

/* 114 */

/* 115 */

/* 116 */

/* 117 */

/* 118 */

/* 119 */

/* 12 */

/* 120 */

/* 121 */

/* 122 */

/* 123 */

/* 124 */

/* 125 */

/* 126 */

/* 127 */

/* 128 */

/* 129 */

/* 13 */

/* 130 */

/* 131 */

/* 132 */

/* 133 */

/* 134 */

/* 135 */

/* 136 */

/* 137 */

/* 138 */

/* 139 */

/* 14 */

/* 140 */

/* 141 */

/* 142 */

/* 143 */

/* 144 */

/* 145 */

/* 146 */

/* 147 */

/* 148 */

/* 149 */

/* 15 */

/* 150 */

/* 151 */

/* 152 */

/* 153 */

/* 154 */

/* 155 */

/* 156 */

/* 157 */

/* 158 */

/* 159 */

/* 16 */

/* 160 */

/* 161 */

/* 162 */

/* 163 */

/* 164 */

/* 165 */

/* 166 */

/* 167 */

/* 168 */

/* 169 */

/* 17 */

/* 170 */

/* 171 */

/* 172 */

/* 173 */

/* 174 */

/* 175 */

/* 176 */

/* 177 */

/* 178 */

/* 179 */

/* 18 */

/* 180 */

/* 181 */

/* 182 */

/* 183 */

/* 184 */

/* 185 */

/* 186 */

/* 187 */

/* 188 */

/* 189 */

/* 19 */

/* 190 */

/* 191 */

/* 192 */

/* 193 */

/* 194 */

/* 195 */

/* 196 */

/* 197 */

/* 198 */

/* 199 */

/* 2 */

/* 20 */

/* 200 */

/* 201 */

/* 202 */

/* 203 */

/* 204 */

/* 205 */

/* 206 */

/* 207 */

/* 208 */

/* 209 */

/* 21 */

/* 210 */

/* 211 */

/* 212 */

/* 213 */

/* 214 */

/* 215 */

/* 216 */

/* 217 */

/* 218 */

/* 219 */

/* 22 */

/* 220 */

/* 221 */

/* 222 */

/* 223 */

/* 224 */

/* 225 */

/* 226 */

/* 227 */

/* 228 */

/* 229 */

/* 23 */

/* 230 */

/* 231 */

/* 232 */

/* 233 */

/* 234 */

/* 235 */

/* 236 */

/* 237 */

/* 238 */

/* 239 */

/* 24 */

/* 240 */

/* 241 */

/* 242 */

/* 243 */

/* 244 */

/* 245 */

/* 246 */

/* 247 */

/* 248 */

/* 249 */

/* 25 */

/* 250 */

/* 251 */

/* 252 */

/* 253 */

/* 254 */

/* 255 */

/* 256 */

/* 257 */

/* 258 */

/* 259 */

/* 26 */

/* 260 */

/* 261 */

/* 262 */

/* 263 */

/* 264 */

/* 265 */

/* 266 */

/* 267 */

/* 268 */

/* 269 */

/* 27 */

/* 270 */

/* 271 */

/* 272 */

/* 273 */

/* 274 */

/* 275 */

/* 276 */

/* 277 */

/* 278 */

/* 279 */

/* 28 */

/* 280 */

/* 281 */

/* 282 */

/* 283 */

/* 284 */

/* 285 */

/* 286 */

/* 287 */

/* 288 */

/* 289 */

/* 29 */

/* 290 */

/* 291 */

/* 292 */

/* 293 */

/* 294 */

/* 295 */

/* 296 */

/* 297 */

/* 298 */

/* 299 */

/* 3 */

/* 30 */

/* 300 */

/* 301 */

/* 302 */

/* 303 */

/* 304 */

/* 305 */

/* 306 */

/* 307 */

/* 308 */

/* 309 */

/* 31 */

/* 310 */

/* 311 */

/* 312 */

/* 313 */

/* 314 */

/* 315 */

/* 316 */

/* 317 */

/* 318 */

/* 319 */

/* 32 */

/* 320 */

/* 321 */

/* 322 */

/* 323 */

/* 324 */

/* 325 */

/* 326 */

/* 327 */

/* 328 */

/* 329 */

/* 33 */

/* 330 */

/* 331 */

/* 332 */

/* 333 */

/* 334 */

/* 335 */

/* 336 */

/* 337 */

/* 338 */

/* 339 */

/* 34 */

/* 340 */

/* 341 */

/* 342 */

/* 343 */

/* 344 */

/* 345 */

/* 346 */

/* 347 */

/* 348 */

/* 349 */

/* 35 */

/* 350 */

/* 351 */

/* 352 */

/* 353 */

/* 354 */

/* 355 */

/* 356 */

/* 357 */

/* 358 */

/* 359 */

/* 36 */

/* 360 */

/* 361 */

/* 362 */

/* 363 */

/* 364 */

/* 365 */

/* 366 */

/* 367 */

/* 368 */

/* 369 */

/* 37 */

/* 370 */

/* 371 */

/* 372 */

/* 373 */

/* 374 */

/* 375 */

/* 376 */

/* 377 */

/* 378 */

/* 379 */

/* 38 */

/* 380 */

/* 381 */

/* 382 */

/* 383 */

/* 384 */

/* 385 */

/* 386 */

/* 387 */

/* 388 */

/* 389 */

/* 39 */

/* 390 */

/* 391 */

/* 392 */

/* 393 */

/* 394 */

/* 395 */

/* 396 */

/* 397 */

/* 398 */

/* 399 */

/* 4 */

/* 40 */

/* 400 */

/* 401 */

/* 402 */

/* 403 */

/* 404 */

/* 405 */

/* 406 */

/* 407 */

/* 408 */

/* 409 */

/* 41 */

/* 410 */

/* 411 */

/* 412 */

/* 413 */

/* 414 */

/* 415 */

/* 416 */

/* 417 */

/* 418 */

/* 419 */

/* 42 */

/* 420 */

/* 421 */

/* 422 */

/* 423 */

/* 424 */

/* 425 */

/* 426 */

/* 427 */

/* 428 */

/* 429 */

/* 43 */

/* 430 */

/* 431 */

/* 432 */

/* 433 */

/* 434 */

/* 435 */

/* 436 */

/* 437 */

/* 438 */

/* 439 */

/* 44 */

/* 440 */

/* 441 */

/* 442 */

/* 443 */

/* 444 */

/* 445 */

/* 446 */

/* 447 */

/* 448 */

/* 449 */

/* 45 */

/* 450 */

/* 451 */

/* 452 */

/* 453 */

/* 454 */

/* 455 */

/* 456 */

/* 457 */

/* 458 */

/* 459 */

/* 46 */

/* 460 */

/* 461 */

/* 462 */

/* 463 */

/* 464 */

/* 465 */

/* 466 */

/* 467 */

/* 468 */

/* 469 */

/* 47 */

/* 470 */

/* 471 */

/* 472 */

/* 473 */

/* 474 */

/* 475 */

/* 476 */

/* 477 */

/* 478 */

/* 479 */

/* 48 */

/* 480 */

/* 481 */

/* 482 */

/* 483 */

/* 484 */

/* 485 */

/* 486 */

/* 487 */

/* 488 */

/* 489 */

/* 49 */

/* 490 */

/* 491 */

/* 492 */

/* 493 */

/* 494 */

/* 495 */

/* 496 */

/* 497 */

/* 498 */

/* 499 */

/* 5 */

/* 50 */

/* 500 */

/* 501 */

/* 502 */

/* 503 */

/* 504 */

/* 505 */

/* 506 */

/* 507 */

/* 508 */

/* 509 */

/* 51 */

/* 510 */

/* 511 */

/* 512 */

/* 513 */

/* 514 */

/* 515 */

/* 516 */

/* 517 */

/* 518 */

/* 519 */

/* 52 */

/* 520 */

/* 521 */

/* 522 */

/* 523 */

/* 524 */

/* 525 */

/* 526 */

/* 527 */

/* 528 */

/* 529 */

/* 53 */

/* 530 */

/* 531 */

/* 532 */

/* 533 */

/* 534 */

/* 535 */

/* 536 */

/* 537 */

/* 538 */

/* 539 */

/* 54 */

/* 540 */

/* 541 */

/* 542 */

/* 543 */

/* 544 */

/* 545 */

/* 546 */

/* 547 */

/* 548 */

/* 549 */

/* 55 */

/* 550 */

/* 551 */

/* 552 */

/* 553 */

/* 554 */

/* 555 */

/* 556 */

/* 557 */

/* 558 */

/* 559 */

/* 56 */

/* 560 */

/* 561 */

/* 562 */

/* 563 */

/* 564 */

/* 565 */

/* 566 */

/* 567 */

/* 568 */

/* 569 */

/* 57 */

/* 570 */

/* 571 */

/* 572 */

/* 573 */

/* 574 */

/* 575 */

/* 576 */

/* 577 */

/* 578 */

/* 579 */

/* 58 */

/* 580 */

/* 581 */

/* 582 */

/* 583 */

/* 584 */

/* 585 */

/* 586 */

/* 587 */

/* 588 */

/* 589 */

/* 59 */

/* 590 */

/* 591 */

/* 592 */

/* 593 */

/* 594 */

/* 595 */

/* 596 */

/* 597 */

/* 598 */

/* 599 */

/* 6 */

/* 60 */

/* 600 */

/* 601 */

/* 602 */

/* 603 */

/* 604 */

/* 605 */

/* 606 */

/* 607 */

/* 608 */

/* 609 */

/* 61 */

/* 610 */

/* 611 */

/* 612 */

/* 613 */

/* 614 */

/* 615 */

/* 616 */

/* 617 */

/* 618 */

/* 619 */

/* 62 */

/* 620 */

/* 621 */

/* 622 */

/* 623 */

/* 624 */

/* 625 */

/* 626 */

/* 627 */

/* 628 */

/* 629 */

/* 63 */

/* 630 */

/* 631 */

/* 632 */

/* 633 */

/* 634 */

/* 635 */

/* 636 */

/* 637 */

/* 638 */

/* 639 */

/* 64 */

/* 640 */

/* 641 */

/* 642 */

/* 643 */

/* 644 */

/* 645 */

/* 646 */

/* 647 */

/* 648 */

/* 649 */

/* 65 */

/* 650 */

/* 651 */

/* 652 */

/* 653 */

/* 654 */

/* 655 */

/* 656 */

/* 657 */

/* 658 */

/* 659 */

/* 66 */

/* 660 */

/* 661 */

/* 662 */

/* 663 */

/* 664 */

/* 665 */

/* 666 */

/* 667 */

/* 668 */

/* 669 */

/* 67 */

/* 670 */

/* 671 */

/* 672 */

/* 673 */

/* 674 */

/* 675 */

/* 676 */

/* 677 */

/* 678 */

/* 679 */

/* 68 */

/* 680 */

/* 681 */

/* 682 */

/* 683 */

/* 684 */

/* 685 */

/* 686 */

/* 687 */

/* 688 */

/* 689 */

/* 69 */

/* 690 */

/* 691 */

/* 692 */

/* 693 */

/* 694 */

/* 695 */

/* 696 */

/* 697 */

/* 698 */

/* 699 */

/* 7 */

/* 70 */

/* 700 */

/* 701 */

/* 702 */

/* 703 */

/* 704 */

/* 705 */

/* 706 */

/* 707 */

/* 708 */

/* 709 */

/* 71 */

/* 710 */

/* 711 */

/* 712 */

/* 713 */

/* 714 */

/* 715 */

/* 716 */

/* 717 */

/* 718 */

/* 719 */

/* 72 */

/* 720 */

/* 721 */

/* 722 */

/* 723 */

/* 724 */

/* 725 */

/* 726 */

/* 727 */

/* 728 */

/* 729 */

/* 73 */

/* 730 */

/* 731 */

/* 732 */

/* 733 */

/* 734 */

/* 735 */

/* 736 */

/* 737 */

/* 738 */

/* 739 */

/* 74 */

/* 740 */

/* 741 */

/* 742 */

/* 743 */

/* 744 */

/* 745 */

/* 746 */

/* 747 */

/* 748 */

/* 749 */

/* 75 */

/* 750 */

/* 751 */

/* 752 */

/* 753 */

/* 754 */

/* 755 */

/* 756 */

/* 757 */

/* 758 */

/* 759 */

/* 76 */

/* 760 */

/* 761 */

/* 762 */

/* 763 */

/* 764 */

/* 765 */

/* 766 */

/* 767 */

/* 768 */

/* 769 */

/* 77 */

/* 770 */

/* 771 */

/* 772 */

/* 773 */

/* 774 */

/* 775 */

/* 776 */

/* 777 */

/* 778 */

/* 779 */

/* 78 */

/* 780 */

/* 781 */

/* 782 */

/* 783 */

/* 784 */

/* 785 */

/* 786 */

/* 787 */

/* 788 */

/* 789 */

/* 79 */

/* 790 */

/* 791 */

/* 792 */

/* 793 */

/* 794 */

/* 795 */

/* 796 */

/* 797 */

/* 798 */

/* 799 */

/* 8 */

/* 80 */

/* 800 */

/* 801 */

/* 802 */

/* 803 */

/* 804 */

/* 805 */

/* 806 */

/* 807 */

/* 808 */

/* 809 */

/* 81 */

/* 810 */

/* 811 */

/* 812 */

/* 813 */

/* 814 */

/* 815 */

/* 816 */

/* 817 */

/* 818 */

/* 819 */

/* 82 */

/* 820 */

/* 821 */

/* 822 */

/* 823 */

/* 824 */

/* 825 */

/* 83 */

/* 84 */

/* 85 */

/* 86 */

/* 87 */

/* 88 */

/* 89 */

/* 9 */

/* 90 */

/* 91 */

/* 92 */

/* 93 */

/* 94 */

/* 95 */

/* 96 */

/* 97 */

/* 98 */

/* 99 */

/* <--------------------------- * number START * --------------------------- */

/* <------------------------------------ **** Node Third Level Class END **** ------------------------------------ */

/* <------------------------------------ **** formValidation END **** ------------------------------------ */

/* <------------------------------------ **** string validation END **** ------------------------------------ */

/* BEGIN.ATTRIBUTION */

/* BlockNode */

/* END.ATTRIBUTION */

/* Ele */

/* ExecutionNode */

/* LoopNode */

/* MarkNode */

/* QuotaNode */

/* binding */

/* default */

/* eslint-disable dot-notation */

/* eslint-disable no-unused-vars */

/* eslint-enable */

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

/* harmony default export */

/* harmony export */

/* harmony import */

/* module decorator */

/* reexport */

/* unused harmony export Node */

/* unused harmony exports fas, prefix, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, fa8, fa9, faA, faAddressBook, faContactBook, faAddressCard, faContactCard, faVcard, faAlignCenter, faAlignJustify, faAlignLeft, faAlignRight, faAnchor, faAnchorCircleCheck, faAnchorCircleExclamation, faAnchorCircleXmark, faAnchorLock, faAngleDown, faAngleLeft, faAngleRight, faAngleUp, faAnglesDown, faAngleDoubleDown, faAnglesLeft, faAngleDoubleLeft, faAnglesRight, faAngleDoubleRight, faAnglesUp, faAngleDoubleUp, faAnkh, faAppleWhole, faAppleAlt, faArchway, faArrowDown, faArrowDown19, faSortNumericAsc, faSortNumericDown, faArrowDown91, faSortNumericDesc, faSortNumericDownAlt, faArrowDownAZ, faSortAlphaAsc, faSortAlphaDown, faArrowDownLong, faLongArrowDown, faArrowDownShortWide, faSortAmountDesc, faSortAmountDownAlt, faArrowDownUpAcrossLine, faArrowDownUpLock, faArrowDownWideShort, faSortAmountAsc, faSortAmountDown, faArrowDownZA, faSortAlphaDesc, faSortAlphaDownAlt, faArrowLeft, faArrowLeftLong, faLongArrowLeft, faArrowPointer, faMousePointer, faArrowRight, faArrowRightArrowLeft, faExchange, faArrowRightFromBracket, faSignOut, faArrowRightLong, faLongArrowRight, faArrowRightToBracket, faSignIn, faArrowRightToCity, faArrowRotateLeft, faArrowLeftRotate, faArrowRotateBack, faArrowRotateBackward, faUndo, faArrowRotateRight, faArrowRightRotate, faArrowRotateForward, faRedo, faArrowTrendDown, faArrowTrendUp, faArrowTurnDown, faLevelDown, faArrowTurnUp, faLevelUp, faArrowUp, faArrowUp19, faSortNumericUp, faArrowUp91, faSortNumericUpAlt, faArrowUpAZ, faSortAlphaUp, faArrowUpFromBracket, faArrowUpFromGroundWater, faArrowUpFromWaterPump, faArrowUpLong, faLongArrowUp, faArrowUpRightDots, faArrowUpRightFromSquare, faExternalLink, faArrowUpShortWide, faSortAmountUpAlt, faArrowUpWideShort, faSortAmountUp, faArrowUpZA, faSortAlphaUpAlt, faArrowsDownToLine, faArrowsDownToPeople, faArrowsLeftRight, faArrowsH, faArrowsLeftRightToLine, faArrowsRotate, faRefresh, faSync, faArrowsSpin, faArrowsSplitUpAndLeft, faArrowsToCircle, faArrowsToDot, faArrowsToEye, faArrowsTurnRight, faArrowsTurnToDots, faArrowsUpDown, faArrowsV, faArrowsUpDownLeftRight, faArrows, faArrowsUpToLine, faAsterisk, faAt, faAtom, faAudioDescription, faAustralSign, faAward, faB, faBaby, faBabyCarriage, faCarriageBaby, faBackward, faBackwardFast, faFastBackward, faBackwardStep, faStepBackward, faBacon, faBacteria, faBacterium, faBagShopping, faShoppingBag, faBahai, faHaykal, faBahtSign, faBan, faCancel, faBanSmoking, faSmokingBan, faBandage, faBandAid, faBarcode, faBars, faNavicon, faBarsProgress, faTasksAlt, faBarsStaggered, faReorder, faStream, faBaseball, faBaseballBall, faBaseballBatBall, faBasketShopping, faShoppingBasket, faBasketball, faBasketballBall, faBath, faBathtub, faBatteryEmpty, faBattery0, faBatteryFull, faBattery, faBattery5, faBatteryHalf, faBattery3, faBatteryQuarter, faBattery2, faBatteryThreeQuarters, faBattery4, faBed, faBedPulse, faProcedures, faBeerMugEmpty, faBeer, faBell, faBellConcierge, faConciergeBell, faBellSlash, faBezierCurve, faBicycle, faBinoculars, faBiohazard, faBitcoinSign, faBlender, faBlenderPhone, faBlog, faBold, faBolt, faZap, faBoltLightning, faBomb, faBone, faBong, faBook, faBookAtlas, faAtlas, faBookBible, faBible, faBookBookmark, faBookJournalWhills, faJournalWhills, faBookMedical, faBookOpen, faBookOpenReader, faBookReader, faBookQuran, faQuran, faBookSkull, faBookDead, faBookTanakh, faTanakh, faBookmark, faBorderAll, faBorderNone, faBorderTopLeft, faBorderStyle, faBoreHole, faBottleDroplet, faBottleWater, faBowlFood, faBowlRice, faBowlingBall, faBox, faBoxArchive, faArchive, faBoxOpen, faBoxTissue, faBoxesPacking, faBoxesStacked, faBoxes, faBoxesAlt, faBraille, faBrain, faBrazilianRealSign, faBreadSlice, faBridge, faBridgeCircleCheck, faBridgeCircleExclamation, faBridgeCircleXmark, faBridgeLock, faBridgeWater, faBriefcase, faBriefcaseMedical, faBroom, faBroomBall, faQuidditch, faQuidditchBroomBall, faBrush, faBucket, faBug, faBugSlash, faBugs, faBuilding, faBuildingCircleArrowRight, faBuildingCircleCheck, faBuildingCircleExclamation, faBuildingCircleXmark, faBuildingColumns, faBank, faInstitution, faMuseum, faUniversity, faBuildingFlag, faBuildingLock, faBuildingNgo, faBuildingShield, faBuildingUn, faBuildingUser, faBuildingWheat, faBullhorn, faBullseye, faBurger, faHamburger, faBurst, faBus, faBusSimple, faBusAlt, faBusinessTime, faBriefcaseClock, faC, faCableCar, faTram, faCakeCandles, faBirthdayCake, faCake, faCalculator, faCalendar, faCalendarCheck, faCalendarDay, faCalendarDays, faCalendarAlt, faCalendarMinus, faCalendarPlus, faCalendarWeek, faCalendarXmark, faCalendarTimes, faCamera, faCameraAlt, faCameraRetro, faCameraRotate, faCampground, faCandyCane, faCannabis, faCapsules, faCar, faAutomobile, faCarBattery, faBatteryCar, faCarBurst, faCarCrash, faCarOn, faCarRear, faCarAlt, faCarSide, faCarTunnel, faCaravan, faCaretDown, faCaretLeft, faCaretRight, faCaretUp, faCarrot, faCartArrowDown, faCartFlatbed, faDollyFlatbed, faCartFlatbedSuitcase, faLuggageCart, faCartPlus, faCartShopping, faShoppingCart, faCashRegister, faCat, faCediSign, faCentSign, faCertificate, faChair, faChalkboard, faBlackboard, faChalkboardUser, faChalkboardTeacher, faChampagneGlasses, faGlassCheers, faChargingStation, faChartArea, faAreaChart, faChartBar, faBarChart, faChartColumn, faChartGantt, faChartLine, faLineChart, faChartPie, faPieChart, faChartSimple, faCheck, faCheckDouble, faCheckToSlot, faVoteYea, faCheese, faChess, faChessBishop, faChessBoard, faChessKing, faChessKnight, faChessPawn, faChessQueen, faChessRook, faChevronDown, faChevronLeft, faChevronRight, faChevronUp, faChild, faChildDress, faChildReaching, faChildRifle, faChildren, faChurch, faCircle, faCircleArrowDown, faArrowCircleDown, faCircleArrowLeft, faArrowCircleLeft, faCircleArrowRight, faArrowCircleRight, faCircleArrowUp, faArrowCircleUp, faCircleCheck, faCheckCircle, faCircleChevronDown, faChevronCircleDown, faCircleChevronLeft, faChevronCircleLeft, faCircleChevronRight, faChevronCircleRight, faCircleChevronUp, faChevronCircleUp, faCircleDollarToSlot, faDonate, faCircleDot, faDotCircle, faCircleDown, faArrowAltCircleDown, faCircleExclamation, faExclamationCircle, faCircleH, faHospitalSymbol, faCircleHalfStroke, faAdjust, faCircleInfo, faInfoCircle, faCircleLeft, faArrowAltCircleLeft, faCircleMinus, faMinusCircle, faCircleNodes, faCircleNotch, faCirclePause, faPauseCircle, faCirclePlay, faPlayCircle, faCirclePlus, faCircleQuestion, faQuestionCircle, faCircleRadiation, faRadiationAlt, faCircleRight, faArrowAltCircleRight, faCircleStop, faStopCircle, faCircleUp, faArrowAltCircleUp, faCircleUser, faUserCircle, faCircleXmark, faTimesCircle, faXmarkCircle, faCity, faClapperboard, faClipboard, faClipboardCheck, faClipboardList, faClipboardQuestion, faClipboardUser, faClock, faClockFour, faClockRotateLeft, faHistory, faClone, faClosedCaptioning, faCloud, faCloudArrowDown, faCloudDownload, faCloudDownloadAlt, faCloudArrowUp, faCloudUpload, faCloudUploadAlt, faCloudBolt, faThunderstorm, faCloudMeatball, faCloudMoon, faCloudMoonRain, faCloudRain, faCloudShowersHeavy, faCloudShowersWater, faCloudSun, faCloudSunRain, faClover, faCode, faCodeBranch, faCodeCommit, faCodeCompare, faCodeFork, faCodeMerge, faCodePullRequest, faCoins, faColonSign, faComment, faCommentDollar, faCommentDots, faCommenting, faCommentMedical, faCommentSlash, faCommentSms, faSms, faComments, faCommentsDollar, faCompactDisc, faCompass, faCompassDrafting, faDraftingCompass, faCompress, faComputer, faComputerMouse, faMouse, faCookie, faCookieBite, faCopy, faCopyright, faCouch, faCow, faCreditCard, faCreditCardAlt, faCrop, faCropSimple, faCropAlt, faCross, faCrosshairs, faCrow, faCrown, faCrutch, faCruzeiroSign, faCube, faCubes, faCubesStacked, faD, faDatabase, faDeleteLeft, faBackspace, faDemocrat, faDesktop, faDesktopAlt, faDharmachakra, faDiagramNext, faDiagramPredecessor, faDiagramProject, faProjectDiagram, faDiagramSuccessor, faDiamond, faDiamondTurnRight, faDirections, faDice, faDiceD20, faDiceD6, faDiceFive, faDiceFour, faDiceOne, faDiceSix, faDiceThree, faDiceTwo, faDisease, faDisplay, faDivide, faDna, faDog, faDollarSign, faDollar, faUsd, faDolly, faDollyBox, faDongSign, faDoorClosed, faDoorOpen, faDove, faDownLeftAndUpRightToCenter, faCompressAlt, faDownLong, faLongArrowAltDown, faDownload, faDragon, faDrawPolygon, faDroplet, faTint, faDropletSlash, faTintSlash, faDrum, faDrumSteelpan, faDrumstickBite, faDumbbell, faDumpster, faDumpsterFire, faDungeon, faE, faEarDeaf, faDeaf, faDeafness, faHardOfHearing, faEarListen, faAssistiveListeningSystems, faEarthAfrica, faGlobeAfrica, faEarthAmericas, faEarth, faEarthAmerica, faGlobeAmericas, faEarthAsia, faGlobeAsia, faEarthEurope, faGlobeEurope, faEarthOceania, faGlobeOceania, faEgg, faEject, faElevator, faEllipsis, faEllipsisH, faEllipsisVertical, faEllipsisV, faEnvelope, faEnvelopeCircleCheck, faEnvelopeOpen, faEnvelopeOpenText, faEnvelopesBulk, faMailBulk, faEquals, faEraser, faEthernet, faEuroSign, faEur, faEuro, faExclamation, faExpand, faExplosion, faEye, faEyeDropper, faEyeDropperEmpty, faEyedropper, faEyeLowVision, faLowVision, faEyeSlash, faF, faFaceAngry, faAngry, faFaceDizzy, faDizzy, faFaceFlushed, faFlushed, faFaceFrown, faFrown, faFaceFrownOpen, faFrownOpen, faFaceGrimace, faGrimace, faFaceGrin, faGrin, faFaceGrinBeam, faGrinBeam, faFaceGrinBeamSweat, faGrinBeamSweat, faFaceGrinHearts, faGrinHearts, faFaceGrinSquint, faGrinSquint, faFaceGrinSquintTears, faGrinSquintTears, faFaceGrinStars, faGrinStars, faFaceGrinTears, faGrinTears, faFaceGrinTongue, faGrinTongue, faFaceGrinTongueSquint, faGrinTongueSquint, faFaceGrinTongueWink, faGrinTongueWink, faFaceGrinWide, faGrinAlt, faFaceGrinWink, faGrinWink, faFaceKiss, faKiss, faFaceKissBeam, faKissBeam, faFaceKissWinkHeart, faKissWinkHeart, faFaceLaugh, faLaugh, faFaceLaughBeam, faLaughBeam, faFaceLaughSquint, faLaughSquint, faFaceLaughWink, faLaughWink, faFaceMeh, faMeh, faFaceMehBlank, faMehBlank, faFaceRollingEyes, faMehRollingEyes, faFaceSadCry, faSadCry, faFaceSadTear, faSadTear, faFaceSmile, faSmile, faFaceSmileBeam, faSmileBeam, faFaceSmileWink, faSmileWink, faFaceSurprise, faSurprise, faFaceTired, faTired, faFan, faFaucet, faFaucetDrip, faFax, faFeather, faFeatherPointed, faFeatherAlt, faFerry, faFile, faFileArrowDown, faFileDownload, faFileArrowUp, faFileUpload, faFileAudio, faFileCircleCheck, faFileCircleExclamation, faFileCircleMinus, faFileCirclePlus, faFileCircleQuestion, faFileCircleXmark, faFileCode, faFileContract, faFileCsv, faFileExcel, faFileExport, faArrowRightFromFile, faFileImage, faFileImport, faArrowRightToFile, faFileInvoice, faFileInvoiceDollar, faFileLines, faFileAlt, faFileText, faFileMedical, faFilePdf, faFilePen, faFileEdit, faFilePowerpoint, faFilePrescription, faFileShield, faFileSignature, faFileVideo, faFileWaveform, faFileMedicalAlt, faFileWord, faFileZipper, faFileArchive, faFill, faFillDrip, faFilm, faFilter, faFilterCircleDollar, faFunnelDollar, faFilterCircleXmark, faFingerprint, faFire, faFireBurner, faFireExtinguisher, faFireFlameCurved, faFireAlt, faFireFlameSimple, faBurn, faFish, faFishFins, faFlag, faFlagCheckered, faFlagUsa, faFlask, faFlaskVial, faFloppyDisk, faSave, faFlorinSign, faFolder, faFolderBlank, faFolderClosed, faFolderMinus, faFolderOpen, faFolderPlus, faFolderTree, faFont, faFontAwesome, faFontAwesomeFlag, faFontAwesomeLogoFull, faFootball, faFootballBall, faForward, faForwardFast, faFastForward, faForwardStep, faStepForward, faFrancSign, faFrog, faFutbol, faFutbolBall, faSoccerBall, faG, faGamepad, faGasPump, faGauge, faDashboard, faGaugeMed, faTachometerAltAverage, faGaugeHigh, faTachometerAlt, faTachometerAltFast, faGaugeSimple, faGaugeSimpleMed, faTachometerAverage, faGaugeSimpleHigh, faTachometer, faTachometerFast, faGavel, faLegal, faGear, faGears, faCogs, faGem, faGenderless, faGhost, faGift, faGifts, faGlassWater, faGlassWaterDroplet, faGlasses, faGlobe, faGolfBallTee, faGolfBall, faGopuram, faGraduationCap, faMortarBoard, faGreaterThan, faGreaterThanEqual, faGrip, faGripHorizontal, faGripLines, faGripLinesVertical, faGroupArrowsRotate, faGuaraniSign, faGuitar, faGun, faH, faHammer, faHamsa, faHand, faHandPaper, faHandBackFist, faHandRock, faHandDots, faAllergies, faHandFist, faFistRaised, faHandHolding, faHandHoldingDollar, faHandHoldingUsd, faHandHoldingDroplet, faHandHoldingWater, faHandHoldingHand, faHandHoldingHeart, faHandHoldingMedical, faHandLizard, faHandMiddleFinger, faHandPeace, faHandPointDown, faHandPointLeft, faHandPointRight, faHandPointUp, faHandPointer, faHandScissors, faHandSparkles, faHandSpock, faHandcuffs, faHands, faSignLanguage, faSigning, faHandsAslInterpreting, faAmericanSignLanguageInterpreting, faAslInterpreting, faHandsAmericanSignLanguageInterpreting, faHandsBound, faHandsBubbles, faHandsWash, faHandsClapping, faHandsHolding, faHandsHoldingChild, faHandsHoldingCircle, faHandsPraying, faPrayingHands, faHandshake, faHandshakeAngle, faHandsHelping, faHandshakeSimple, faHandshakeAlt, faHandshakeSimpleSlash, faHandshakeAltSlash, faHandshakeSlash, faHanukiah, faHardDrive, faHdd, faHashtag, faHatCowboy, faHatCowboySide, faHatWizard, faHeadSideCough, faHeadSideCoughSlash, faHeadSideMask, faHeadSideVirus, faHeading, faHeader, faHeadphones, faHeadphonesSimple, faHeadphonesAlt, faHeadset, faHeart, faHeartCircleBolt, faHeartCircleCheck, faHeartCircleExclamation, faHeartCircleMinus, faHeartCirclePlus, faHeartCircleXmark, faHeartCrack, faHeartBroken, faHeartPulse, faHeartbeat, faHelicopter, faHelicopterSymbol, faHelmetSafety, faHardHat, faHatHard, faHelmetUn, faHighlighter, faHillAvalanche, faHillRockslide, faHippo, faHockeyPuck, faHollyBerry, faHorse, faHorseHead, faHospital, faHospitalAlt, faHospitalWide, faHospitalUser, faHotTubPerson, faHotTub, faHotdog, faHotel, faHourglass, faHourglassEmpty, faHourglassEnd, faHourglass3, faHourglassHalf, faHourglass2, faHourglassStart, faHourglass1, faHouse, faHome, faHomeAlt, faHomeLgAlt, faHouseChimney, faHomeLg, faHouseChimneyCrack, faHouseDamage, faHouseChimneyMedical, faClinicMedical, faHouseChimneyUser, faHouseChimneyWindow, faHouseCircleCheck, faHouseCircleExclamation, faHouseCircleXmark, faHouseCrack, faHouseFire, faHouseFlag, faHouseFloodWater, faHouseFloodWaterCircleArrowRight, faHouseLaptop, faLaptopHouse, faHouseLock, faHouseMedical, faHouseMedicalCircleCheck, faHouseMedicalCircleExclamation, faHouseMedicalCircleXmark, faHouseMedicalFlag, faHouseSignal, faHouseTsunami, faHouseUser, faHomeUser, faHryvniaSign, faHryvnia, faHurricane, faI, faICursor, faIceCream, faIcicles, faIcons, faHeartMusicCameraBolt, faIdBadge, faIdCard, faDriversLicense, faIdCardClip, faIdCardAlt, faIgloo, faImage, faImagePortrait, faPortrait, faImages, faInbox, faIndent, faIndianRupeeSign, faIndianRupee, faInr, faIndustry, faInfinity, faInfo, faItalic, faJ, faJar, faJarWheat, faJedi, faJetFighter, faFighterJet, faJetFighterUp, faJoint, faJugDetergent, faK, faKaaba, faKey, faKeyboard, faKhanda, faKipSign, faKitMedical, faFirstAid, faKitchenSet, faKiwiBird, faL, faLandMineOn, faLandmark, faLandmarkDome, faLandmarkAlt, faLandmarkFlag, faLanguage, faLaptop, faLaptopCode, faLaptopFile, faLaptopMedical, faLariSign, faLayerGroup, faLeaf, faLeftLong, faLongArrowAltLeft, faLeftRight, faArrowsAltH, faLemon, faLessThan, faLessThanEqual, faLifeRing, faLightbulb, faLinesLeaning, faLink, faChain, faLinkSlash, faChainBroken, faChainSlash, faUnlink, faLiraSign, faList, faListSquares, faListCheck, faTasks, faListOl, faList12, faListNumeric, faListUl, faListDots, faLitecoinSign, faLocationArrow, faLocationCrosshairs, faLocation, faLocationDot, faMapMarkerAlt, faLocationPin, faMapMarker, faLocationPinLock, faLock, faLockOpen, faLocust, faLungs, faLungsVirus, faM, faMagnet, faMagnifyingGlass, faSearch, faMagnifyingGlassArrowRight, faMagnifyingGlassChart, faMagnifyingGlassDollar, faSearchDollar, faMagnifyingGlassLocation, faSearchLocation, faMagnifyingGlassMinus, faSearchMinus, faMagnifyingGlassPlus, faSearchPlus, faManatSign, faMap, faMapLocation, faMapMarked, faMapLocationDot, faMapMarkedAlt, faMapPin, faMarker, faMars, faMarsAndVenus, faMarsAndVenusBurst, faMarsDouble, faMarsStroke, faMarsStrokeRight, faMarsStrokeH, faMarsStrokeUp, faMarsStrokeV, faMartiniGlass, faGlassMartiniAlt, faMartiniGlassCitrus, faCocktail, faMartiniGlassEmpty, faGlassMartini, faMask, faMaskFace, faMaskVentilator, faMasksTheater, faTheaterMasks, faMattressPillow, faMaximize, faExpandArrowsAlt, faMedal, faMemory, faMenorah, faMercury, faMessage, faCommentAlt, faMeteor, faMicrochip, faMicrophone, faMicrophoneLines, faMicrophoneAlt, faMicrophoneLinesSlash, faMicrophoneAltSlash, faMicrophoneSlash, faMicroscope, faMillSign, faMinimize, faCompressArrowsAlt, faSubtract, faMitten, faMobile, faMobileAndroid, faMobilePhone, faMobileButton, faMobileRetro, faMobileScreen, faMobileAndroidAlt, faMobileScreenButton, faMobileAlt, faMoneyBill, faMoneyBill1, faMoneyBillAlt, faMoneyBill1Wave, faMoneyBillWaveAlt, faMoneyBillTransfer, faMoneyBillTrendUp, faMoneyBillWave, faMoneyBillWheat, faMoneyBills, faMoneyCheck, faMoneyCheckDollar, faMoneyCheckAlt, faMonument, faMoon, faMortarPestle, faMosque, faMosquito, faMosquitoNet, faMotorcycle, faMound, faMountain, faMountainCity, faMountainSun, faMugHot, faMugSaucer, faCoffee, faMusic, faN, faNairaSign, faNetworkWired, faNeuter, faNewspaper, faNotEqual, faNotdef, faNoteSticky, faStickyNote, faNotesMedical, faO, faObjectGroup, faObjectUngroup, faOilCan, faOilWell, faOm, faOtter, faOutdent, faDedent, faP, faPager, faPaintRoller, faPaintbrush, faPaintBrush, faPalette, faPallet, faPanorama, faPaperPlane, faPaperclip, faParachuteBox, faParagraph, faPassport, faPaste, faFileClipboard, faPause, faPaw, faPeace, faPen, faPenClip, faPenAlt, faPenFancy, faPenNib, faPenRuler, faPencilRuler, faPenToSquare, faEdit, faPencil, faPencilAlt, faPeopleArrows, faPeopleArrowsLeftRight, faPeopleCarryBox, faPeopleCarry, faPeopleGroup, faPeopleLine, faPeoplePulling, faPeopleRobbery, faPeopleRoof, faPepperHot, faPercent, faPercentage, faPerson, faMale, faPersonArrowDownToLine, faPersonArrowUpFromLine, faPersonBiking, faBiking, faPersonBooth, faPersonBreastfeeding, faPersonBurst, faPersonCane, faPersonChalkboard, faPersonCircleCheck, faPersonCircleExclamation, faPersonCircleMinus, faPersonCirclePlus, faPersonCircleQuestion, faPersonCircleXmark, faPersonDigging, faDigging, faPersonDotsFromLine, faDiagnoses, faPersonDress, faFemale, faPersonDressBurst, faPersonDrowning, faPersonFalling, faPersonFallingBurst, faPersonHalfDress, faPersonHarassing, faPersonHiking, faHiking, faPersonMilitaryPointing, faPersonMilitaryRifle, faPersonMilitaryToPerson, faPersonPraying, faPray, faPersonPregnant, faPersonRays, faPersonRifle, faPersonRunning, faRunning, faPersonShelter, faPersonSkating, faSkating, faPersonSkiing, faSkiing, faPersonSkiingNordic, faSkiingNordic, faPersonSnowboarding, faSnowboarding, faPersonSwimming, faSwimmer, faPersonThroughWindow, faPersonWalking, faWalking, faPersonWalkingArrowLoopLeft, faPersonWalkingArrowRight, faPersonWalkingDashedLineArrowRight, faPersonWalkingLuggage, faPersonWalkingWithCane, faBlind, faPesetaSign, faPesoSign, faPhone, faPhoneFlip, faPhoneAlt, faPhoneSlash, faPhoneVolume, faVolumeControlPhone, faPhotoFilm, faPhotoVideo, faPiggyBank, faPills, faPizzaSlice, faPlaceOfWorship, faPlane, faPlaneArrival, faPlaneCircleCheck, faPlaneCircleExclamation, faPlaneCircleXmark, faPlaneDeparture, faPlaneLock, faPlaneSlash, faPlaneUp, faPlantWilt, faPlateWheat, faPlay, faPlug, faPlugCircleBolt, faPlugCircleCheck, faPlugCircleExclamation, faPlugCircleMinus, faPlugCirclePlus, faPlugCircleXmark, faAdd, faPlusMinus, faPodcast, faPoo, faPooStorm, faPooBolt, faPoop, faPowerOff, faPrescription, faPrescriptionBottle, faPrescriptionBottleMedical, faPrescriptionBottleAlt, faPrint, faPumpMedical, faPumpSoap, faPuzzlePiece, faQ, faQrcode, faQuestion, faQuoteLeft, faQuoteLeftAlt, faQuoteRight, faQuoteRightAlt, faR, faRadiation, faRadio, faRainbow, faRankingStar, faReceipt, faRecordVinyl, faRectangleAd, faAd, faRectangleList, faListAlt, faRectangleXmark, faRectangleTimes, faTimesRectangle, faWindowClose, faRecycle, faRegistered, faRepeat, faReply, faMailReply, faReplyAll, faMailReplyAll, faRepublican, faRestroom, faRetweet, faRibbon, faRightFromBracket, faSignOutAlt, faRightLeft, faExchangeAlt, faRightLong, faLongArrowAltRight, faRightToBracket, faSignInAlt, faRing, faRoad, faRoadBarrier, faRoadBridge, faRoadCircleCheck, faRoadCircleExclamation, faRoadCircleXmark, faRoadLock, faRoadSpikes, faRobot, faRocket, faRotate, faSyncAlt, faRotateLeft, faRotateBack, faRotateBackward, faUndoAlt, faRotateRight, faRedoAlt, faRotateForward, faRoute, faRss, faFeed, faRubleSign, faRouble, faRub, faRuble, faRug, faRuler, faRulerCombined, faRulerHorizontal, faRulerVertical, faRupeeSign, faRupee, faRupiahSign, faS, faSackDollar, faSackXmark, faSailboat, faSatellite, faSatelliteDish, faScaleBalanced, faBalanceScale, faScaleUnbalanced, faBalanceScaleLeft, faScaleUnbalancedFlip, faBalanceScaleRight, faSchool, faSchoolCircleCheck, faSchoolCircleExclamation, faSchoolCircleXmark, faSchoolFlag, faSchoolLock, faScissors, faCut, faScrewdriver, faScrewdriverWrench, faScroll, faScrollTorah, faTorah, faSdCard, faSection, faSeedling, faSprout, faServer, faShapes, faTriangleCircleSquare, faShare, faArrowTurnRight, faMailForward, faShareFromSquare, faShareSquare, faShareNodes, faShareAlt, faSheetPlastic, faShekelSign, faIls, faShekel, faSheqel, faSheqelSign, faShield, faShieldBlank, faShieldCat, faShieldDog, faShieldHalved, faShieldAlt, faShieldHeart, faShieldVirus, faShip, faShirt, faTShirt, faTshirt, faShoePrints, faShop, faStoreAlt, faShopLock, faShopSlash, faStoreAltSlash, faShower, faShrimp, faShuffle, faRandom, faShuttleSpace, faSpaceShuttle, faSignHanging, faSign, faSignal, faSignal5, faSignalPerfect, faSignature, faSignsPost, faMapSigns, faSimCard, faSink, faSitemap, faSkull, faSkullCrossbones, faSlash, faSleigh, faSliders, faSlidersH, faSmog, faSmoking, faSnowflake, faSnowman, faSnowplow, faSoap, faSocks, faSolarPanel, faSort, faUnsorted, faSortDown, faSortDesc, faSortUp, faSortAsc, faSpa, faSpaghettiMonsterFlying, faPastafarianism, faSpellCheck, faSpider, faSpinner, faSplotch, faSpoon, faUtensilSpoon, faSprayCan, faSprayCanSparkles, faAirFreshener, faSquare, faSquareArrowUpRight, faExternalLinkSquare, faSquareCaretDown, faCaretSquareDown, faSquareCaretLeft, faCaretSquareLeft, faSquareCaretRight, faCaretSquareRight, faSquareCaretUp, faCaretSquareUp, faSquareCheck, faCheckSquare, faSquareEnvelope, faEnvelopeSquare, faSquareFull, faSquareH, faHSquare, faSquareMinus, faMinusSquare, faSquareNfi, faSquareParking, faParking, faSquarePen, faPenSquare, faPencilSquare, faSquarePersonConfined, faSquarePhone, faPhoneSquare, faSquarePhoneFlip, faPhoneSquareAlt, faSquarePlus, faPlusSquare, faSquarePollHorizontal, faPollH, faSquarePollVertical, faPoll, faSquareRootVariable, faSquareRootAlt, faSquareRss, faRssSquare, faSquareShareNodes, faShareAltSquare, faSquareUpRight, faExternalLinkSquareAlt, faSquareVirus, faSquareXmark, faTimesSquare, faXmarkSquare, faStaffSnake, faRodAsclepius, faRodSnake, faStaffAesculapius, faStairs, faStamp, faStapler, faStar, faStarAndCrescent, faStarHalf, faStarHalfStroke, faStarHalfAlt, faStarOfDavid, faStarOfLife, faSterlingSign, faGbp, faPoundSign, faStethoscope, faStop, faStopwatch, faStopwatch20, faStore, faStoreSlash, faStreetView, faStrikethrough, faStroopwafel, faSubscript, faSuitcase, faSuitcaseMedical, faMedkit, faSuitcaseRolling, faSun, faSunPlantWilt, faSuperscript, faSwatchbook, faSynagogue, faSyringe, faT, faTable, faTableCells, faTh, faTableCellsLarge, faThLarge, faTableColumns, faColumns, faTableList, faThList, faTableTennisPaddleBall, faPingPongPaddleBall, faTableTennis, faTablet, faTabletAndroid, faTabletButton, faTabletScreenButton, faTabletAlt, faTablets, faTachographDigital, faDigitalTachograph, faTag, faTags, faTape, faTarp, faTarpDroplet, faTaxi, faCab, faTeeth, faTeethOpen, faTemperatureArrowDown, faTemperatureDown, faTemperatureArrowUp, faTemperatureUp, faTemperatureEmpty, faTemperature0, faThermometer0, faThermometerEmpty, faTemperatureFull, faTemperature4, faThermometer4, faThermometerFull, faTemperatureHalf, faTemperature2, faThermometer2, faThermometerHalf, faTemperatureHigh, faTemperatureLow, faTemperatureQuarter, faTemperature1, faThermometer1, faThermometerQuarter, faTemperatureThreeQuarters, faTemperature3, faThermometer3, faThermometerThreeQuarters, faTengeSign, faTenge, faTent, faTentArrowDownToLine, faTentArrowLeftRight, faTentArrowTurnLeft, faTentArrowsDown, faTents, faTerminal, faTextHeight, faTextSlash, faRemoveFormat, faTextWidth, faThermometer, faThumbsDown, faThumbsUp, faThumbtack, faThumbTack, faTicket, faTicketSimple, faTicketAlt, faTimeline, faToggleOff, faToggleOn, faToilet, faToiletPaper, faToiletPaperSlash, faToiletPortable, faToiletsPortable, faToolbox, faTooth, faToriiGate, faTornado, faTowerBroadcast, faBroadcastTower, faTowerCell, faTowerObservation, faTractor, faTrademark, faTrafficLight, faTrailer, faTrain, faTrainSubway, faSubway, faTrainTram, faTransgender, faTransgenderAlt, faTrash, faTrashArrowUp, faTrashRestore, faTrashCan, faTrashAlt, faTrashCanArrowUp, faTrashRestoreAlt, faTree, faTreeCity, faTriangleExclamation, faExclamationTriangle, faWarning, faTrophy, faTrowel, faTrowelBricks, faTruck, faTruckArrowRight, faTruckDroplet, faTruckFast, faShippingFast, faTruckField, faTruckFieldUn, faTruckFront, faTruckMedical, faAmbulance, faTruckMonster, faTruckMoving, faTruckPickup, faTruckPlane, faTruckRampBox, faTruckLoading, faTty, faTeletype, faTurkishLiraSign, faTry, faTurkishLira, faTurnDown, faLevelDownAlt, faTurnUp, faLevelUpAlt, faTv, faTelevision, faTvAlt, faU, faUmbrella, faUmbrellaBeach, faUnderline, faUniversalAccess, faUnlock, faUnlockKeyhole, faUnlockAlt, faUpDown, faArrowsAltV, faUpDownLeftRight, faArrowsAlt, faUpLong, faLongArrowAltUp, faUpRightAndDownLeftFromCenter, faExpandAlt, faUpRightFromSquare, faExternalLinkAlt, faUpload, faUser, faUserAstronaut, faUserCheck, faUserClock, faUserDoctor, faUserMd, faUserGear, faUserCog, faUserGraduate, faUserGroup, faUserInjured, faUserLarge, faUserAlt, faUserLargeSlash, faUserAltSlash, faUserLock, faUserMinus, faUserNinja, faUserNurse, faUserPen, faUserEdit, faUserPlus, faUserSecret, faUserShield, faUserSlash, faUserTag, faUserTie, faUserXmark, faUserTimes, faUsers, faUsersBetweenLines, faUsersGear, faUsersCog, faUsersLine, faUsersRays, faUsersRectangle, faUsersSlash, faUsersViewfinder, faUtensils, faCutlery, faV, faVanShuttle, faShuttleVan, faVault, faVectorSquare, faVenus, faVenusDouble, faVenusMars, faVest, faVestPatches, faVial, faVialCircleCheck, faVialVirus, faVials, faVideo, faVideoCamera, faVideoSlash, faVihara, faVirus, faVirusCovid, faVirusCovidSlash, faVirusSlash, faViruses, faVoicemail, faVolcano, faVolleyball, faVolleyballBall, faVolumeHigh, faVolumeUp, faVolumeLow, faVolumeDown, faVolumeOff, faVolumeXmark, faVolumeMute, faVolumeTimes, faVrCardboard, faW, faWalkieTalkie, faWallet, faWandMagic, faMagic, faWandMagicSparkles, faMagicWandSparkles, faWandSparkles, faWarehouse, faWater, faWaterLadder, faLadderWater, faSwimmingPool, faWaveSquare, faWeightHanging, faWeightScale, faWeight, faWheatAwn, faWheatAlt, faWheatAwnCircleExclamation, faWheelchair, faWheelchairMove, faWheelchairAlt, faWhiskeyGlass, faGlassWhiskey, faWifi, faWifi3, faWifiStrong, faWind, faWindowMaximize, faWindowMinimize, faWindowRestore, faWineBottle, faWineGlass, faWineGlassEmpty, faWineGlassAlt, faWonSign, faKrw, faWon, faWorm, faWrench, faX, faXRay, faXmark, faClose, faMultiply, faRemove, faTimes, faXmarksLines, faY, faYenSign, faCny, faJpy, faRmb, faYen, faYinYang, faZ */

/* unused reexport */

/*!
 * Font Awesome Free 6.0.0 by @fontawesome - https://fontawesome.com
 * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
 * Copyright 2022 Fonticons, Inc.
 */

/*!
 * Font Awesome Free 6.1.2 by @fontawesome - https://fontawesome.com
 * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
 * Copyright 2022 Fonticons, Inc.
 */

/*! @license
==========================================================================
SproutCore -- JavaScript Application Framework
copyright 2006-2009, Sprout Systems Inc., Apple Inc. and contributors.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

SproutCore and the SproutCore logo are trademarks of Sprout Systems, Inc.

For more information about SproutCore, visit http://www.sproutcore.com


==========================================================================
@license */

/*#__PURE__*/

/**
   * Compute and return the score for a match with e errors and x location.
   * Accesses loc and pattern through being a closure.
   * @param {number} e Number of errors in match.
   * @param {number} x Location of match.
   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).
   * @private
   */

/**
   * Does a substring of shorttext exist within longtext such that the substring
   * is at least half the length of longtext?
   * Closure, but does not reference any external variables.
   * @param {string} longtext Longer string.
   * @param {string} shorttext Shorter string.
   * @param {number} i Start index of quarter length substring within longtext.
   * @return {Array.<string>} Five element Array, containing the prefix of
   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
   *     of shorttext and the common middle.  Or null if there was no match.
   * @private
   */

/**
   * Font Awesome 4 used the prefix of `fa` for all icons. With the introduction
   * of new styles we needed to differentiate between them. Prefix `fa` is now an alias
   * for `fas` so we'll ease the upgrade process for our users by automatically defining
   * this as well.
   */

/**
   * Given two strings, compute a score representing whether the internal
   * boundary falls on logical boundaries.
   * Scores range from 6 (best) to 0 (worst).
   * Closure, but does not reference any external variables.
   * @param {string} one First string.
   * @param {string} two Second string.
   * @return {number} The score.
   * @private
   */

/**
   * Split a text into an array of strings.  Reduce the texts to a string of
   * hashes where each Unicode character represents one line.
   * Modifies linearray and linehash through being a closure.
   * @param {string} text String to encode.
   * @return {string} Encoded string.
   * @private
   */

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */

/**
 * # Reduce
 *
 * A fast object `.reduce()` implementation.
 *
 * @param  {Object}   subject      The object to reduce over.
 * @param  {Function} fn           The reducer function.
 * @param  {mixed}    initialValue The initial value for the reducer, defaults to subject[0].
 * @param  {Object}   thisContext  The context for the reducer.
 * @return {mixed}                 The final result.
 */

/**
 * @file this file contain Top level class Ele
 * @date 2020-11-09
 * @author Frank
 * @lastModify Frank 2020-11-09
 */

/**
 * @file this file will contain all the validation function with number
 * @date 2020-10-01
 * @author Frank
 * @lastModify Frank 2020-10-01
 */

/**
 * @fileoverview Computes the difference between two texts to create a patch.
 * Applies the patch onto another text, allowing for errors.
 * @author fraser@google.com (Neil Fraser)
 */

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

/**
 * Add some padding on text start and end so that edges can match something.
 * Intended to be called only from within patch_apply.
 * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
 * @return {string} The padding string added to each side.
 */

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Class containing the diff, match and patch methods.
 * @constructor
 */

/**
 * Class representing one diff tuple.
 * ~Attempts to look like a two-element array (which is what this used to be).~
 * Constructor returns an actual two-element array, to allow destructing @JackuB
 * See https://github.com/JackuB/diff-match-patch/issues/14 for details
 * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.
 * @param {string} text Text to be deleted, inserted, or retained.
 * @constructor
 */

/**
 * Class representing one patch operation.
 * @constructor
 */

/**
 * Compute a list of patches to turn text1 into text2.
 * Use diffs if provided, otherwise compute it ourselves.
 * There are four ways to call this function, depending on what data is
 * available to the caller:
 * Method 1:
 * a = text1, b = text2
 * Method 2:
 * a = diffs
 * Method 3 (optimal):
 * a = text1, b = diffs
 * Method 4 (deprecated, use method 3):
 * a = text1, b = text2, c = diffs
 *
 * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or
 * Array of diff tuples for text1 to text2 (method 2).
 * @param {string|!Array.<!diff_match_patch.Diff>=} opt_b text2 (methods 1,4) or
 * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).
 * @param {string|!Array.<!diff_match_patch.Diff>=} opt_c Array of diff tuples
 * for text1 to text2 (method 4) or undefined (methods 1,2,3).
 * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.
 */

/**
 * Compute and return the destination text (all equalities and insertions).
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {string} Destination text.
 */

/**
 * Compute and return the source text (all equalities and deletions).
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {string} Source text.
 */

/**
 * Compute the Levenshtein distance; the number of inserted, deleted or
 * substituted characters.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {number} Number of changes.
 */

/**
 * Convert a diff array into a pretty HTML report.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {string} HTML representation.
 */

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Crush the diff into an encoded string which describes the operations
 * required to transform text1 into text2.
 * E.g. =3\t-2\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.
 * Operations are tab-separated.  Inserted text is escaped using %xx notation.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @return {string} Delta text.
 */

/**
 * Define a module along with a payload
 * @param module a name for the payload
 * @param payload a function to call with (require, exports, module) params
 */

/**
 * Determine if the suffix of one string is the prefix of another.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the end of the first
 *     string and the start of the second string.
 * @private
 */

/**
 * Determine the common prefix of two strings.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the start of each
 *     string.
 */

/**
 * Determine the common suffix of two strings.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {number} The number of characters common to the end of each string.
 */

/**
 * Diff Match and Patch
 * Copyright 2018 The diff-match-patch Authors.
 * https://github.com/google/diff-match-patch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Do a quick line-level diff on both strings, then rediff the parts for
 * greater accuracy.
 * This speedup can produce non-minimal diffs.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {number} deadline Time when the diff should be complete by.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @private
 */

/**
 * Do the two texts share a substring which is at least half the length of the
 * longer text?
 * This speedup can produce non-minimal diffs.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {Array.<string>} Five element Array, containing the prefix of
 *     text1, the suffix of text1, the prefix of text2, the suffix of
 *     text2 and the common middle.  Or null if there was no match.
 * @private
 */

/**
 * Emulate GNU diff's format.
 * Header: @@ -382,8 +481,9 @@
 * Indices are printed as 1-based, not 0-based.
 * @return {string} The GNU diff string.
 */

/**
 * Find the 'middle snake' of a diff, split the problem in two
 * and return the recursively constructed diff.
 * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {number} deadline Time at which to bail if not yet complete.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @private
 */

/**
 * Find the differences between two texts.  Assumes that the texts do not
 * have any common prefix or suffix.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {boolean} checklines Speedup flag.  If false, then don't run a
 *     line-level diff first to identify the changed areas.
 *     If true, then run a faster, slightly less optimal diff.
 * @param {number} deadline Time when the diff should be complete by.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @private
 */

/**
 * Find the differences between two texts.  Simplifies the problem by stripping
 * any common prefix or suffix off the texts before diffing.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {boolean=} opt_checklines Optional speedup flag. If present and false,
 *     then don't run a line-level diff first to identify the changed areas.
 *     Defaults to true, which does a faster, slightly less optimal diff.
 * @param {number=} opt_deadline Optional time when the diff should be complete
 *     by.  Used internally for recursive calls.  Users should set DiffTimeout
 *     instead.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 */

/**
 * Get at functionality define()ed using the function above
 */

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */

/**
 * Given an array of patches, return another array that is identical.
 * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
 * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.
 */

/**
 * Given the location of the 'middle snake', split the diff in two parts
 * and recurse.
 * @param {string} text1 Old string to be diffed.
 * @param {string} text2 New string to be diffed.
 * @param {number} x Index of split point in text1.
 * @param {number} y Index of split point in text2.
 * @param {number} deadline Time at which to bail if not yet complete.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @private
 */

/**
 * Given the original text1, and an encoded string which describes the
 * operations required to transform text1 into text2, compute the full diff.
 * @param {string} text1 Source string for the diff.
 * @param {string} delta Delta text.
 * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
 * @throws {!Error} If invalid input.
 */

/**
 * Increase the context until it is unique,
 * but don't let the pattern expand beyond Match_MaxBits.
 * @param {!diff_match_patch.patch_obj} patch The patch to grow.
 * @param {string} text Source text.
 * @private
 */

/**
 * Initialise the alphabet for the Bitap algorithm.
 * @param {string} pattern The text to encode.
 * @return {!Object} Hash of character locations.
 * @private
 */

/**
 * Internal helper to bind a function known to have 4 arguments
 * to a given context.
 */

/**
 * Locate the best instance of 'pattern' in 'text' near 'loc' using the
 * Bitap algorithm.
 * @param {string} text The text to search.
 * @param {string} pattern The pattern to search for.
 * @param {number} loc The location to search around.
 * @return {number} Best match index or -1.
 * @private
 */

/**
 * Locate the best instance of 'pattern' in 'text' near 'loc'.
 * @param {string} text The text to search.
 * @param {string} pattern The pattern to search for.
 * @param {number} loc The location to search around.
 * @return {number} Best match index or -1.
 */

/**
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/**
 * Look for single edits surrounded on both sides by equalities
 * which can be shifted sideways to align the edit to a word boundary.
 * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 */

/**
 * Look through the patches and break up any which are longer than the maximum
 * limit of the match algorithm.
 * Intended to be called only from within patch_apply.
 * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
 */

/**
 * Merge a set of patches onto the text.  Return a patched text, as well
 * as a list of true/false values indicating which patches were applied.
 * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
 * @param {string} text Old text.
 * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the
 *      new text and an array of boolean values.
 */

/**
 * Parse a textual representation of patches and return a list of Patch objects.
 * @param {string} textline Text representation of patches.
 * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.
 * @throws {!Error} If invalid input.
 */

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */

/**
 * Reduce the number of edits by eliminating operationally trivial equalities.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 */

/**
 * Reduce the number of edits by eliminating semantically trivial equalities.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 */

/**
 * Rehydrate the text in a diff from a string of line hashes to real lines of
 * text.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @param {!Array.<string>} lineArray Array of unique strings.
 * @private
 */

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */

/**
 * Reorder and merge like edit sections.  Merge equalities.
 * Any edit section can move as long as it doesn't cross an equality.
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 */

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */

/**
 * Split two texts into an array of strings.  Reduce the texts to a string of
 * hashes where each Unicode character represents one line.
 * @param {string} text1 First string.
 * @param {string} text2 Second string.
 * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}
 *     An object containing the encoded text1, the encoded text2 and
 *     the array of unique strings.
 *     The zeroth element of the array of unique strings is intentionally blank.
 * @private
 */

/**
 * Take a list of patches and return a textual representation.
 * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
 * @return {string} Text representation of patches.
 */

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

/**
 * The data structure representing a diff is an array of tuples:
 * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
 * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
 */

/**
 * The main class required to set up an Ace instance in the browser.
 *
 * @class Ace
 **/

/**
 * This function will check the min length of the value
 * @param {string} value the value will be checked
 * @param {number} length the min length of the value
 */

/**
 * This function will check whether the value is number or not
 * @param {string} value the value will be checked
 */

/**
 * This is the top class Ele
 * @param {string} id the id of the list
 * @param {'Ele'} kind the list kind is type of 'Ele'
 * @param {object | null} meta the meta data of the list
 * @param {object | null} editor the editor of the list
 */

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */

/**
 * loc is a location in text1, compute and return the equivalent location in
 * text2.
 * e.g. 'The cat' vs 'The big cat', 1->1, 5->8
 * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
 * @param {number} loc Location within text1.
 * @return {number} Location within text2.
 */

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/**
 * ucs2decode() and codePointAt() are both works of Mathias Bynens and licensed under MIT
 *
 * Copyright Mathias Bynens <https://mathiasbynens.be/>

 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:

 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @class */

/** @license React v0.20.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.2
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.2
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @type {!Array.<!diff_match_patch.Diff>} */

/** @type {?number} */

/** @type {number} */

/** @type {string} */

/** Detect free variable `global` from Node.js. */

/** Detect free variable `self`. */

/** Used as the `TypeError` message for "Functions" methods. */

/** Used as the size to enable large array optimizations. */

/** Used for built-in method references. */

/** Used to detect overreaching core-js shims. */

/** Used to stand-in for `undefined` hash values. */

/***/

//   -> <del>abc</del>xxx<ins>def</ins>

//   -> <ins>def</ins>xxx<del>abc</del>

//  DIFF FUNCTIONS

//  MATCH FUNCTIONS

//  PATCH FUNCTIONS

// "undefined" in the uuid)

// '\x00' is a valid character, but various debuggers don't like it.

// 'this' becomes 'window' in a closure.

// 'whitespace'.  Since this function's purpose is largely cosmetic,

// - Invalid input values for the RFC `version` or `variant` fields

// - One or more input array values don't map to a hex octet (leading to

// 1.0 = very loose).  Note that Match_Threshold controls how closely the

// 1.0 to the score (0.0 is a perfect match).

// 20, but the first patch was found at 12, delta is 2 and the second patch

// @ts-ignore

// @ts-ignore types don't include

// A deletion and an insertion is one substitution.

// A half-match was found, sort out the return data.

// A match this many characters away from the expected location will add

// A new patch starts here.

// Adapted from https://stackoverflow.com/questions/26695708/how-can-i-add-placeholder-text-when-the-editor-is-empty

// Add a dummy entry at the end.

// Add methods to `Hash`.

// Add methods to `ListCache`.

// Add methods to `MapCache`.

// Add methods to `SetCache`.

// Add methods to `Stack`.

// Add nullPadding equality.

// Add one chunk for good luck.

// Add some padding on end of last diff.

// Add some padding on start of first diff.

// Add the prefix.

// Add the remaining character length.

// Add the suffix.

// After the previous speedup, the character can't be an equality.

// Allocate 2/3rds of the space for text1, the rest for text2.

// Allow a fallback from the regular style to solid if regular is not available

// Already passed loc, downhill from here on in.

// An insertion or deletion.

// And it can be discarded immediately afterward to avoid confusing

// Anything else is an error.

// Append the end context for this patch.

// Assign cache to `_.memoize`.

// Assume cyclic values are equal.

// At what point is no match declared (0.0 = perfection, 1.0 = very loose).

// Backwards-compatibility

// Bail out at 65535 because

// Binary search.

// Blank tokens are ok (from a trailing \t).

// Both matched.  Select the longest.

// Breaks the while-loop.

// Bump all the patches forward.

// But check anyway.

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_qfvalidation/validationFunction/schemafun/schema/number.ts

// CONCATENATED MODULE: ./node_modules/@possie-engine/dr_front_corecomponentlibrary/index.ts

// CONCATENATED MODULE: ./node_modules/@possie-engine/dr_front_surveyconfig/index.ts

// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/regex.js

// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/rng.js

// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/stringify.js

// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/v4.js

// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/validate.js

// Cache the text lengths to prevent multiple calls.

// Camelize taken from humps

// Can't find valid trailing context.  Drop this patch.

// Candidate found.

// Change second copy to insert.

// Check again based on the third quarter.

// Check for equality (speedup).

// Check for null inputs.

// Check to see if the problem can be split in two.

// Chunk size for context length.

// Coerce booleans to `1` or `0` and dates to milliseconds.

// Coerce regexes to strings and treat strings, primitives and objects,

// Collapse insert range.

// Compute diffs from text1 and text2.

// Compute text1 from diffs.

// Compute the diff on the middle block.

// Compute the head context for the next patch.

// Consistency check for valid UUID.  If this throws, it's likely due to one

// Convert the diff back to original text.

// Copy bytes to buffer, if provided

// Cost of an empty edit operation in terms of edit characters.

// Create one of several smaller patches.

// DCE check should happen before ReactDOM bundle executes so that

// Deep copy the patches so that no changes are made to originals.

// Defaults.

// Define some regex patterns for matching boundaries.

// Delete the offending records and add the merged ones.

// Delete the old one, since we're replacing it with a new one

// Deletion

// Deletion or equality.  Only take as much as we can stomach.

// Deletion.

// Detect buggy property enumeration order in older V8 versions.

// DevTools can report bad minification during injection.

// Diff took too long and hit the deadline or

// Don't risk returning a non-optimal diff if we have unlimited time.

// Duplicate record.

// During SSR even just an empty object will work.

// EXPORTS

// EXTERNAL MODULE: ./node_modules/@possie-engine/dr_front_corecomponentlibrary/node_modules/@fortawesome/react-fontawesome/index.js

// EXTERNAL MODULE: ./node_modules/@possie-engine/dr_front_corecomponentlibrary/node_modules/react/jsx-runtime.js

// EXTERNAL MODULE: ./node_modules/@possie-engine/dr_front_surveyconfig/Class/EleClass.ts

// EXTERNAL MODULE: ./node_modules/react-ace/lib/index.js

// Each port of this function behaves slightly differently due to

// Each token begins with a one character parameter which specifies the

// Edges are the best.

// Eliminate an equality that is smaller or equal to the edits on both

// Eliminate freak matches (e.g. blank lines)

// Eliminate the null case.

// Equality found.

// Equality or deletion.

// Equality or insertion.

// Escape the body of the patch with %xx notation.

// Exclamation

// Exit early for strings to avoid a performance hit in some environments.

// Extend the lengths.

// Factor out any common prefixies.

// Factor out any common suffixies.

// Fall through.

// Fallback for ace.require when vanilla ACE is hosted over a CDN

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

// Find any overlaps between deletions and insertions.

// First check if the second quarter is the seed for a half-match.

// First pass: exact match.

// First process editor value, as it may create a new session (see issue #300)

// For example <script data-search-pseudo-elements src="..."></script>

// Found a match.  :)

// Get CSS class list from a props object

// Get rid of the null case.

// Getting an empty string will occur if the attribute is set on the HTML tag but without a value

// Grow first equality.

// Grow last equality.

// Highest score beyond which we give up.

// How far to search for a match (0 = exact location, 1000+ = broad match).

// If shifts were made, the diff needs reordering and another shift sweep.

// If the deletion does not include a newline, highlight the same line on the right

// If the deletion starts with a newline, push the cursor down to that line

// If the insertion does not include a newline, highlight the same line on the left

// If the insertion starts with a newline, push the cursor down to that line

// If the last character is a newline, we don't want to highlight that line

// If the total number of characters is odd, then the front path will collide

// If we already have a replaced node we do not want to continue nesting within it.

// If we have a Kit, we can't determine if regular is available since we

// If we've already processed it but the current computed style does not result in a font-family,

// Ignore non-index properties.

// Imperfect match.  Run a diff to get a framework of equivalent

// Initialise the alphabet.

// Initialise the bit arrays.

// Insert an equality and swap and trim the surrounding edits.

// Insertion

// Insertion.

// Insertions are harmless.

// Intentionally ignore the first and last element (don't need checking).

// Invalid dates are coerced to `NaN`.

// Is there a nearby exact match? (speedup)

// JSON.stringify doesn't hanle Infinity

// Just add some text (speedup).

// Just delete some text (speedup).

// Look for the first and last matches of pattern in text.  If two different

// Making deep copies is hard in JavaScript.

// Malformed URI sequence.

// Many host objects are `Object` objects that can coerce to strings

// Merge the results.

// Merge this equality with the previous one.

// Method 1: text1, text2

// Method 2: diffs

// Method 3: text1, diffs

// Method 4: text1, text2, diffs

// Minor equality.

// Mirror x2 onto top-left coordinate system.

// Modifying text would create many large strings to garbage collect.

// No changes made which could affect previous entry, keep going.

// No hope for a (better) match at greater error levels.

// No match found.  :(

// Node.js 0.10 has enumerable non-index properties on buffers.

// Non `Object` object instances with different constructors are not equal.

// Normalize the diff.

// Not a candidate, and can never become one.

// Note: Be careful editing this code!  It's been tuned for performance

// Number of seconds to map a diff before giving up (0 for infinity).

// Only convert the pseudo element in this ::before/::after position into an icon if we haven't

// Only extract an overlap if it is as big as the edit ahead or behind it.

// Operation (insert, delete, equal)

// Overlap detected.

// Overlap found.  Insert an equality and trim the surrounding edits.

// Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

// Perfect match, just shove the replacement text in.

// Performance analysis: https://neil.fraser.name/news/2007/10/09/

// Performance analysis: https://neil.fraser.name/news/2010/11/04/

// Performant way to determine if object coerces to a number

// PhantomJS 2 has enumerable non-index properties on typed arrays.

// Pick up the leftover patch if not empty.

// Pointless.

// Quick check for common null cases.

// Quick check for the worst case.

// Ran off the bottom of the graph.

// Ran off the left of the graph.

// Ran off the right of the graph.

// Ran off the top of the graph.

// Receives a collection of line numbers and iterates through them to highlight appropriately

// Recursively compare arrays (susceptible to call stack limits).

// Recursively compare objects (susceptible to call stack limits).

// Redefine these in your program to override the defaults.

// Rediff any replacement blocks, this time character-by-character.

// Released under the MIT license.

// Remove the big old patch.

// Remove the dummy entry at the end.

// Reset the counters.

// Restore the prefix and suffix.

// Returns an object that tells the render() method how to display the code editors

// Reverse overlap found.

// Ring

// Roll back the start points.

// Run a binary search to determine how far from 'loc' we can stray at this

// Safari 9 has enumerable `arguments.length` in strict mode.

// Scan for the best match; each iteration allows for one more error.

// Scan the text on a line-by-line basis first.

// Second pass: look for single edits surrounded on both sides by equalities

// Second, step character by character right, looking for the best fit.

// Set a deadline by which time the diff must be complete.

// Setting all elements to -1 is faster in Chrome & Firefox than mixing

// Shift the edit over the next equality.

// Shift the edit over the previous equality.

// Short-circuit to the standard replacement

// Shorter text is inside the longer text (speedup).

// Should be 0.

// Single character string.

// Skip index properties.

// Small equality inside a patch.

// So we'll insert a junk entry to avoid generating a null character.

// Start by looking for a single character match

// Start of next patch.

// Start with a 1/4 length substring at position i as a seed.

// String.fromCharCode(65536) == String.fromCharCode(0)

// Strip the padding off.

// Subtract the delta for this failed patch from subsequent patches.

// Swap insertions for deletions if diff is reversed.

// The >= encourages trailing rather than leading whitespace on edits.

// The alphabet (s) is a sparse hash, so the following line generates

// The end points match, but the content is unacceptably bad.

// The fa prefix is not canonical. So if it has made it through until this point

// The following export code was added by @ForbesLindesay

// The number of bits in an int.

// The use of `Object#toString` avoids issues with the `typeof` operator

// This is a large deletion.  Let it pass in one chunk.

// This is a single edit surrounded by equalities.

// This match will almost certainly be better than any existing match.

// This node is already being processed

// Throw away the equality we just deleted.

// Throw away the equality we just deleted;

// Throw away the previous equality (it needs to be reevaluated).

// Throw away the previous equality.

// Told you so.

// Transform relative to the current column

// Transform relative to the current row.

// Trim off common prefix (speedup).

// Trim off common suffix (speedup).

// Truncate the longer string.

// UNUSED EXPORTS: BuiltinScriptItem, ConditionContent, Content, CustomisedScriptItem, Ele, Item, Node, QuestionNode, Questionnaire, ScriptContent, ScriptItem

// UNUSED EXPORTS: ColorEditor, TextEditor

// Unique ID creation requires a high quality random # generator. In the browser we therefore

// Unlike Unidiff, our patch lists have a rolling context.

// Update prepatch text & pos to reflect the application of the

// Update the current character count.

// Upon reaching an equality, check for prior redundancies.

// Use the result from this iteration as the maximum for the next.

// Verify that the code above has been dead code eliminated (DCE'd).

// WTF?

// Walk the front path one step.

// Walk the reverse path one step.

// Walk the text, pulling out a substring for each line.

// Was the location was deleted?

// We don't expect any of the above to throw, but better to be safe.

// We have an improvement, save it back to the diff.

// We'll assume that this is an indication that it should be toggled to true

// What about in the other direction? (speedup)

// When deleting a large block of text (over ~64 characters), how close do

// When passing loc, don't exceed our current distance from loc.

// a monster delete.

// ace-builds just needs some window object to attach ace to.

// add new markers

// already done so with the same prefix and iconName

// and a value of value

// and increase length until no match is found.

// and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434

// as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring

// autosize can change vscroll value in which case we need to update longestLine

// backward compatibility

// before or after alphanumeric

// but only if we aren't auto-fetching SVGs

// commands to enter multiselect mode

// could be auto-fetching it. We'll have to assume that it is available.

// creates an object with a key of key

// delta keeps track of the offset between the expected and actual location

// despite having improperly defined `toString` methods.

// diff-match-patch sometimes returns empty strings at random

// directly from an icon svg package

// do not pair quotes inside strings

// dragging

// e.g. lineArray[4] == 'Hello\n'

// e.g. lineHash['Hello\n'] == 4

// e.g: <del>abcxxx</del><ins>xxxdef</ins>

// e.g: <del>xxxabc</del><ins>defxxx</ins>

// e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC

// editor.setValue is a synchronous function call, change event is emitted before setValue return.

// end points of a delete need to match.

// error level.

// eslint-disable-line eqeqeq

// eslint-disable-line no-new-wrappers

// eslint-disable-line no-useless-call

// eslint-disable-next-line no-prototype-builtins

// eslint-disable-next-line no-self-compare

// eslint-disable-next-line no-useless-escape

// find the complete implementation of crypto (msCrypto) on IE11.

// fold inside range

// for ie

// for more details.

// generators (like Math.random()).

// get a list of possible options to avoid 'misspelled option errors'

// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,

// has an effective expected position of 22.

// https://bugs.chromium.org/p/v8/issues/detail?id=3056

// https://bugs.chromium.org/p/v8/issues/detail?id=4118

// https://github.com/google/diff-match-patch/wiki/Unidiff

// humps is copyright © 2012+ Dom Christie

// if certain conditions are met

// if it's a string, use it as the icon name

// if it's an array with length of two

// if not, return an empty array

// if the icon is an object and has a prefix and an icon name, return it

// if the icon is null, there's nothing to do

// if the value is a non-empty array

// in Safari 8-9 which returns 'object' for typed array and other constructors.

// in Safari 9 which returns 'object' for typed arrays and other constructors.

// in a split scenario we don't want a print margin for the entire application

// indices.

// integers and undefined.

// just completed patch.

// lazy load so that environments that need to polyfill have a chance to do so

// lineCommentRegionStart

// map over all the keys in the classes object

// matches are found, increase the pattern length.

// milliseconds

// mode doesn't support folding

// needed to compensate for hor scollbar

// noop

// normalize plugin requires

// normalize relative requires

// number of diffs equals number of characters, no commonality at all.

// of the following:

// of the previous patch.  If there are patches expected at positions 10 and

// operation of this token (delete, insert, equality).

// or it's not an array but it is truthy

// other libraries that might detect SSR the same way we did.

// patch_splitMax will only provide an oversized pattern in the case of

// previous insertion was of same type

// rather than force total conformity.

// remove background markers

// remove background markers except active line marker and selected word marker

// remove foreground markers

// removed. So we now should delete the icon.

// require the crypto API and do not support built-in fallback to lower quality random number

// return an array of the keys where the value for the key is not null

// self-closing tag

// sides of it.

// skip folds

// strict mode

// subtle differences in each language's definition of things like

// text.split('\n') would would temporarily double our memory footprint.

// text2 is not used.

// that probably means that a class name that was previously present to make the icon has been

// the choice has been made to use each language's native features

// the command is mergeable

// the contents have to be to match the expected contents. (0.0 = perfection,

// then create the object with the key and the value

// there is rightChar and it isn't closing

// this doesn't look like it works at all....

// this has everything that it needs to be rendered which means it was probably imported

// tslint:disable-next-line

// tslint:disable-next-line:no-shadowed-variable

// vim:set ts=4 sts=4 sw=4 st:

// warnings.

// we will shift it to the correct prefix.

// which can be shifted sideways to eliminate an equality.

// with the reverse path.

// wrap string with different quote

//"\u21E5";

//# sourceMappingURL=accessibility.cjs.production.min.js.map

//# sourceMappingURL=core.cjs.production.min.js.map

//# sourceMappingURL=editorOptions.js.map

//# sourceMappingURL=index.js.map

//# sourceMappingURL=sortable.cjs.production.min.js.map

//# sourceMappingURL=utilities.cjs.production.min.js.map

//Range for <

//Range for </

//Range for >

//Range for `>`

//fix levels to reflect character width

//found closing tag

//found opening tag

//found self-closing tag end
